@{
    Layout = "~/TopsLib/Views/Shared/_MobileTemplate.cshtml";

    string ParentIds = string.Empty;
    if (Request.QueryString.AllKeys.Contains("ParentIds"))
    {
        ParentIds = Request.QueryString["ParentIds"];
    }
    //货物编码
    string GoodsCode = Request.QueryString["GoodsCode"];
    if (Request.QueryString.AllKeys.Contains("GoodsCode"))
    {
        GoodsCode = Request.QueryString["GoodsCode"];
    }

    string RecordID = Request.QueryString["RecordID"];
    if (Request.QueryString.AllKeys.Contains("RecordID"))
    {
        RecordID = Request.QueryString["RecordID"];
    }
    
    //数量
    string GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    if (Request.QueryString.AllKeys.Contains("GoodsWorkQuantity"))
    {
        GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    }
    
    //补料之前的数量
    string OldGoodsWorkQuantity = Request.QueryString["OldGoodsWorkQuantity"];
    if (Request.QueryString.AllKeys.Contains("OldGoodsWorkQuantity"))
    {
        OldGoodsWorkQuantity = Request.QueryString["OldGoodsWorkQuantity"];
    }
     
        
        
    //仓库外键ID
    string n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    if (Request.QueryString.AllKeys.Contains("n_Warehouse_Id"))
    {
        n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    } 

    //补料单据外键ID
    string n_BillStockInOut_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_BillStockInOut_Id"))
    {
        n_BillStockInOut_Id = Request.QueryString["n_BillStockInOut_Id"];
    }
     
}
@section Body{
    <input type="hidden" name="GoodsCode" value="@(GoodsCode)" />  
    <div class="body">
 
        <div class="TitleTab">
            <table cellspacing="0">
                <tr>
                    <th>
                        产品编码/<br />
                        储位码/<br />
                        批次号
                    </th>
                    <th>
                        产品名称
                    </th>
                    <th>
                        补料包装数/<br />
                        单位包装件数/<br />
                        储位库存数
                    </th>
                </tr>
            </table>
        </div>
        <div class="InfoTab">
            <table cellspacing="0">
                <tr v-for="(item,i) in DataList" :class="{ 'morechecked':item.s_ReportInventoryCurrent_isCheck }">
                   <td>
                   {{ item.产品编码 }}/<br /> 
                   {{ item.应下架储位码 }}/<br />
                   {{ item.批次号 }} 
                   </td>
                   <td>{{ item.产品名称 }}</td>
                   <td>
                   {{ item.建议补货包装数 }}/<br />
                   {{ item.单位包装件数 }}/<br />
                   {{ item.当前储位库存 }} 
                   </td>
                </tr>
            </table>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsWorkQuantity_Showed" name="GoodsWorkQuantity"
                value="@(GoodsWorkQuantity)" placeholder="补料总数" disabled="disabled" readonly="true" />
        </div>
        <div>
            <input type="text" class="SpaceBarCode" name="SpaceBarCode" placeholder="请输入库位码" v-on:keyup.enter="f_reSureSpaceCode" />
        </div>
        
        <div v-bind:class="button_Div_Showed">
            <div v-on:click="f_SaveBillStockInOut">
                确认补料</div>
        </div>
    </div>
}
@section Script{
    <style type="text/css">
        .TitleTab
        {
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
        }
        .TitleTab table
        {
            width: 100%;
            height: 100%;
        }
        .TitleTab th
        {
            width: 33%;
            border: 1px solid #a5e0a5;
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            background: rgb(200 220 232);
        }
        
        .InfoTab
        {
            width: calc(90%);
            max-height: 132px;
            min-height: 132px;
            margin: calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
            overflow-y: scroll;
        }
        .InfoTab table
        {
            width: 100%;
            height: 100%;
        }
        .InfoTab td
        {
            width: 33%;
            border: 1px solid #a5e0a5;
            height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        }
        
        .GoodsWorkQuantity
        {
            width: calc(90%);
            margin: calc(2.5%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        .SpaceBarCode
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        
        
        .button_Div div
        {
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(2%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        .RadioTab
        { 
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
        }
        
        .morechecked
        {
            background:#a5e0a5;
        }
    </style>
    <script type="text/javascript">
        var ajaxhelper = new ajaxHelper();

        //ajax Post请求
        var ajaxFirst = null;

        $(function () {
            var vue = new Vue({
                el: ".body",
                data: {
                    GoodsWorkQuantity_Showed: "GoodsWorkQuantity",   //数量样式 
                    button_Div_Showed: "button_Div", //按钮样式
                    DataList: new Array() //结果表格数据
                },
                methods: {
                    //加载页面后执行
                    f_reloadPage: function () {

                        //给标题
                        window.parent.$(".top").find("label").text("补料确认");
                        //阻止键盘弹出
                        f_preventKeyBoard();

                        //判定是否存在父窗口
                        if (window.top == window.self) {
                            //加载返回事件 
                            window.parent.f_loadEvent("../../../../SmallSupermarketSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                            + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&GoodsBarCode=" + $("[name=GoodsBarCode]").val() + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&OldGoodsWorkQuantity=" + "@(OldGoodsWorkQuantity)");
                        } else {

                            //返回
                            $("#btnBotton").click(function () {

                                location.href = "../../../../SmallSupermarketSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                            + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&GoodsBarCode=" + $("[name=GoodsBarCode]").val() + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&OldGoodsWorkQuantity=" + "@(OldGoodsWorkQuantity)";
                            })
                        }

                        //库位码焦点
                        $(".SpaceBarCode").focus().select();

                        //初始化该货物的库位分配信息
                        vue.f_SelSmallSupermarketReportInventoryCurrent();
                    },
                    //初始化该货物的库位分配信息
                    f_SelSmallSupermarketReportInventoryCurrent: function () {

                        //对象名 根据货物编码匹配出对应的库存信息
                        var objectName = "SelSmallSupermarketReportInventoryCurrent";
                        //传递参数
                        var param = {
                            s_ReportInventoryCurrent_GoodsProductCode: "@(GoodsCode)",
                            n_Warehouse_Id: "@(n_Warehouse_Id)",
                            s_ReportInventoryCurrent_QualityStatus: 1,
                            GoodsWorkQuantity: "@(GoodsWorkQuantity)",
                            n_RecordID: "@(RecordID)",
                            n_BillStockInOut_Id: "@(n_BillStockInOut_Id)"
                        };

                        ajaxhelper.ajax_Get(objectName, param, function (result) {
                            if (result.IsSuccess) {
                                if (result.Data[0].length > 0) {
                                    //获取提交的数量信息 
                                    var GoodsWorkQuantity = "@(GoodsWorkQuantity)";
                                    //获取显示行的集合
                                    var arr = new Array();
                                    //清空
                                    vue.DataList = new Array();

                                    $.each(result.Data[0], function (index, value) {
                                        value.s_ReportInventoryCurrent_isCheck = false;
                                        vue.DataList.push(value);
                                    })

                                }
                            }
                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);
                        })
                    },
                    //进行补料确认
                    f_SaveBillStockInOut: function () {

                        var obj = event.target;
                        if ($(obj).is("[disabled]")) {
                            return;
                        }

                        var sum = 0;
                        vue.DataList.forEach(function (value, index) {
                            sum += parseFloat(value.单位包装件数) * parseFloat(value.建议补货包装数);

                        })
                        //判定目前产品的库存是否已经达到补货的需求，如果不达到要重复进行提示
                        if (parseFloat($(".GoodsWorkQuantity").val()) > sum) {
                            if (!confirm("当前该产品的总库存都不满足其当前缺料量,请确认是否继续提交!")) {
                                return
                            }
                        }

                        //重复请求处理
                        if (ajaxFirst != null) {
                            ajaxFirst.abort();
                            ajaxFirst = null;
                            return;
                        }
                        $(obj).attr("disabled", "disabled");

                        //自动触发确认库位文本框的回车事件
                        vue.f_reSureSpaceCode();

                        //获取未进行确认库位的记录，并判定是否全部已经确认库位
                        var arr = vue.DataList.filter(function (result) {
                            return result.s_ReportInventoryCurrent_isCheck == false;
                        });

                        if (arr.length > 0) {
                            f_commonShowMsg("当前还有未进行库位确认的记录，请全部库位确认完毕再点击下架!");
                            //重新焦点
                            $(".SpaceBarCode").val("").focus();

                            $(obj).removeAttr("disabled");
                            return;
                        }


                        //对象名 新增货物入库记录以及补料记录
                        var objectName = "InsertSmallSupermarketSingleListStockInOut";

                        var param_data = new Array();
                        vue.DataList.forEach(function (value, index) {
                            var obj = new Object();
                            obj.s_ReportInventoryCurrent_Code = value["应下架储位码"];
                            obj.s_ReportInventoryCurrent_GoodsProductCode = value["产品编码"];
                            obj.s_ReportInventoryCurrent_GoodsBarCode = value["产品编码"];
                            obj.n_BillStockInOut_Id = "@(n_BillStockInOut_Id)";
                            obj.RecordID = "@(RecordID)";
                            obj.s_ListStockInOut_QualityStatus = "";
                            obj.s_ReportInventoryCurrent_DownNumber = parseFloat(value["当前储位库存"]) < parseFloat(value["单位包装件数"]) * parseFloat(value["建议补货包装数"]) ? parseFloat(value["当前储位库存"]) : parseFloat(value["单位包装件数"]) * parseFloat(value["建议补货包装数"]);
                            obj.s_ReportInventoryCurrent_OldNumber = "@(OldGoodsWorkQuantity)";
                            obj.s_ListStockInOut_QualityStatus = "1";
                            obj.s_Warehouse_ShelfForm = "1";
                            obj.n_ReportInventoryCurrent_Id = value["n_ReportInventoryCurrent_Id"];
                            param_data.push(obj);
                        })


                        var param = { Dictionary: param_data };

                        ajaxFirst = ajaxhelper.ajax_Post(objectName, param, function (result) {

                            f_commonShowMsg("补料成功!");

                            setTimeout('location.href = "/SmallSupermarketSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + "&GoodsWorkQuantity=" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&GoodsBarCode=" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)"', 3000);


                            ajaxFirst = null;
                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);
                            ajaxFirst = null;

                            $(obj).removeAttr("disabled");
                        })
                    },
                    //确认库位
                    f_reSureSpaceCode: function () {
                        //获取库位编码
                        var SpaceBarCode = $("[name=SpaceBarCode]").val();

                        $.each(vue.DataList, function (index, value) {
                            if (value.应下架储位码 == SpaceBarCode) {
                                value.s_ReportInventoryCurrent_isCheck = true;
                            }
                        })
                        //清空
                        $("[name=SpaceBarCode]").val("").focus();
                    },
                    //验证所填是否是数字,不是则清空
                    checkNum: function () {
                        //检查是否是非数字值
                        if (isNaN($(event.target).val())) {
                            $(event.target).val("");
                        }
                    }
                }
            })

            //加载页面后执行
            vue.f_reloadPage();
        })
    </script>
}
