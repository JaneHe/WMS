@using Tops.FRM;
@{
    //版本：1.2
    ViewBag.Title = "储位信息";
    ViewBag.ModuleName = "详细资料";
    Layout = "~/TopsLib/Views/Shared/_DataObject.cshtml";
    string QueryName = "SelSpace";
    Tops.FRM.Biz biz = Tops.FRM.Biz.GetBiz(QueryName, Tops.FRM.BizType.Query);
    var metas = Tops.FRM.TopsMeta.LoadMetas(QueryName);
    string ctrl = Request.QueryString["ctrl"];
    string id = Request.QueryString["id"];
    string Sel_Id = Request.QueryString["Sel_Id"];
    ctrl = string.IsNullOrEmpty(ctrl) ? "edit" : ctrl;
    //公开两台配置参数给分部视图
    ViewBag.Biz = biz;
    ViewBag.Metas = metas;
    var moduleConfig = ModuleConfig.GetModuleConfig(metas, biz.Lookups, biz, ctrl);

    string Rack_Id = Request.QueryString["Rack_Id"];

    //查询出厂房与车间的关系信息
    BizResult br = Tops.FRM.Biz.Execute("SelSpaceNeedInfo", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@n_Rack_Id", Rack_Id) }, BizType.Query);
    List<System.Data.DataTable> list = br.Data as List<System.Data.DataTable>;

    Dictionary<string, string> dic = new Dictionary<string, string>();

    //储位编码组成
    string s_Block_Code = string.Empty;
    string s_Shopfloor_Code = string.Empty;
    string s_Warehouse_Code = string.Empty;
    string s_Warehouse_Name = string.Empty;
    string s_Rack_Code = string.Empty;
    
    if (list[0].Rows.Count > 0)
    { 
        s_Block_Code = list[0].Rows[0]["s_Block_Code"].ToString();
        s_Shopfloor_Code = list[0].Rows[0]["s_Shopfloor_Code"].ToString();
        s_Warehouse_Code = list[0].Rows[0]["s_Warehouse_Code"].ToString();
        s_Warehouse_Name = list[0].Rows[0]["s_Warehouse_Name"].ToString();
        s_Rack_Code = list[0].Rows[0]["s_Rack_Code"].ToString(); 
    }
    
    //分隔符
    string SplitStr = list[1].Rows[0]["SplitStr"].ToString(); 

    //当前货架储位最大值
    string Space_MaxCode = string.Empty;
    
    if (list[2].Rows.Count > 0)
    {
        Space_MaxCode = list[2].Rows[0]["Space_MaxCode"].ToString(); 
    }
    
    //获取当前最新的货架编码 与 货架前缀
    string s_Rack_NewCode = string.Empty;
    string s_Rack_CodePrefix = string.Empty;

    if (list[3].Rows.Count > 0){
        
        s_Rack_NewCode = list[3].Rows[0]["s_Rack_Code"].ToString();
        s_Rack_CodePrefix = list[3].Rows[0]["s_Rack_CodePrefix"].ToString(); 
    }

    //重组显示字段配置
    foreach (string key in metas[0].Keys)
    {
        if (!metas[0][key].Hide)
        {
            //宽度大于300的string类型文本默认给文本域
            if (metas[0][key].Width >= 300)
            {
                metas[0][key].Type = "Textarea";
            }
        }
    }
    
     
}
@section Params{
    <form id="paramForm">
    <div class="item_title">
        详细资料：</div>
    <input type="hidden" name="Sel_Id" value="@(Sel_Id)" />
    <input type="hidden" name="Rack_Id" value="@(Rack_Id)" />
    
    <input type="hidden" name="s_Block_Code" value="@(s_Block_Code)" />
    <input type="hidden" name="s_Shopfloor_Code" value="@(s_Shopfloor_Code)" />
    <input type="hidden" name="s_Warehouse_Code" value="@(s_Warehouse_Code)" />
    <input type="hidden" name="s_Warehouse_Name" value="@(s_Warehouse_Name)" />
    <input type="hidden" name="s_Rack_Code" value="@(s_Rack_Code)" />
    <input type="hidden" name="SplitStr" value="@(SplitStr)" /> 
    <input type="hidden" name="Space_MaxCode" value="@(Space_MaxCode)" />
    <input type="hidden" name="s_Rack_CodePrefix" value="@(s_Rack_CodePrefix)" />
    <div id="paramlist" style="width: 1000px;">
        @foreach (string key in metas[0].Keys)
        {
            if (!metas[0][key].Hide)
            {
                if (metas[0][key].Type.Equals("String") || metas[0][key].Type.Equals("Int32") || metas[0][key].Type.Equals("Float"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="text" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("DateTime") || metas[0][key].Type.Equals("BeginDateTime") || metas[0][key].Type.Equals("EndDateTime"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="datetime" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("Textarea"))
                {
            <div class="param_items" style="width:@(metas[0][key].Width + 180)px;display:block;">
                <span>@(metas[0][key].Caption):</span><textarea rows="3" cols="3" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" ></textarea>
            </div>
                }
                else if (metas[0][key].Type.Equals("Int"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span>
                <select name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" >
                    @foreach (string dkey in metas[0][key].DataList.Keys)
                    { 
                        if (metas[0][key].DataList.Keys.Contains(dkey))
                        {
                           <option key="@(dkey)">@(metas[0][key].DataList[dkey])</option>
                        }
                    }
                </select>
            </div>
                }
            }
        }
    </div>
    <div id="showPackArea">
        <div v-bind:class="radiocss">
            <span>{{ ShowPackAreaSpan }}</span>
            <input type="checkbox" id="BlockState" name="CodeState" value="BlockState" v-model="Picked" disabled="disabled"
                  />
            <label for="BlockState">
                厂房编码</label>
            <input type="checkbox" id="ShopFloorState" name="CodeState" value="ShopFloorState" disabled="disabled"
                v-model="Picked" />
            <label for="ShopFloorState">
                车间编码</label>
            <input type="checkbox" id="WarehouseState" name="CodeState" value="WarehouseState" disabled="disabled"
                v-model="Picked" />
            <label for="WarehouseState">
                仓库编码</label>
            <label>货架编码前缀</label>
            <input name="letter" type="text" v-bind:class="SerialNumber" /> 
            <input type="checkbox" id="RackState" name="CodeState" value="RackState" v-model="Picked" 
                disabled="disabled" />
            <label for="RackState">
                货架编码</label>
            @*|<label>
                流水号位数</label>
            <input type="text" name="SerialNumber" value="5" disabled="disabled" v-bind:class="SerialNumber" />*@
            |<label>
                分隔符</label>
            <input type="text" name="Separator" value="@(SplitStr)" disabled="disabled" v-bind:class="SerialNumber" />
            <span v-bind:class="PickedCheckbox">{{ Picked }}</span>
            <input type="button" name="FormingNewRules"  class="save_bt" value="刷新编码前缀" />
        </div> 
        <div v-bind:class="ShowPackAreacss">
            <span>{{ PackAreaInfomation }}</span>
            <label>
            </label>
        </div>
    </div>
    </form>
}
@section Script{
    <script src="../../Content/vue.min.js" type="text/javascript"></script>
    <style type="text/css">
        .param_items
        {
            display: inline-block;
            width: 280px;
            line-height: 30px;
            text-align: right;
            margin: 2px;
        }
        
        .param_items input, .param_items textarea
        {
            border: 1px solid skyblue;
            margin-left: 5px;
        }
         
        /* 储位码编码区域 */
        #showPackArea
        {
            background: skyblue;
            width: 1000px;
            height: 200px;
        }
        .radioItem
        {
            padding: 10px 0px 0px 5px;
            width: 650px;
        }
        .SerialNumber
        {
            width: 20px;
        }
        .packareaItem
        {
            padding: 10px 0px 0px 5px;
            width: 1000px;
        } 
        .PickedCheckbox
        {
            display: none;
        }
        /* 储位码编码区域 */
    </style>
    <script type="text/javascript">
    var moduleConfig=@Html.Raw(moduleConfig);
    var topsRender = null;
    var detailTab = null;

    //展示货架储位编码区域
    var showPackArea = null;

    $(function () {
        $(",#saveBt").show();

        $("#paramlist .param_items:eq(0),#paramlist .param_items:eq(2)").hide(); 
     
        //储位编码与储位二维码,所在层列中的位置禁用
        $("[name=s_Space_Code]").attr("disabled","disabled");
        $("[name=s_Space_BarCode]").attr("disabled","disabled");
        $("[name=n_Space_Position]").attr("disabled","disabled");
        $("[name=n_Space_Warehouse]").attr("disabled","disabled");
   
        
        //展示货架储位编码区域
        showPackArea =  new Vue({
            el:"#showPackArea",
            data:{
               //Picked:["BlockState","ShopFloorState","WarehouseState","RackState"],
               Picked:["WarehouseState","RackState"],
               ShowPackAreaSpan:"储位码规则组成：", 
               PackAreaInfomation:"储位码编码前缀：", 
               radiocss:{
                  radioItem: true
               }, 
               ShowPackAreacss:{
                  packareaItem:true
               },
               SerialNumber:{
                  SerialNumber:true
               },
               PickedCheckbox:{
                  PickedCheckbox:true
               }
            } 
        })
        
        //默认赋予值
        $("[name=n_Rack_Id]").val($("[name=Rack_Id]").val());
        $("[name=letter]").val($("[name=s_Rack_CodePrefix]").val());
        $("[name=n_Space_Warehouse]").val($("[name=s_Warehouse_Name]").val());

        f_loadEvent();
         
    });

    
    //获取添加或修改所需要的数组
    function f_getData(){
        var obj = new Object();
        $("#paramForm").find(".param_items").each(function(index,value){
             if($(value).find("input").length > 0 ){
                obj[$(value).find("input").attr("name")] = $(value).find("input").val();
             }else if($(value).find("textarea").length > 0 ){
                obj[$(value).find("textarea").attr("name")] = $(value).find("textarea").val(); 
             }else if($(value).find("select").length > 0 ){
                obj[$(value).find("select").attr("name")] = $(value).find("option:selected").attr("key"); 
             }
        })
        obj.Sel_Id = $("[name=Sel_Id]").val();
        obj.n_Rack_Id = "@(Rack_Id)";
         
        obj.s_Rack_CodePrefix = $("[name=letter]").val();
        obj.PackCodeRule = $("[class=PickedCheckbox]").text(); 

        return obj;
    }

     //加载数据
    function f_setData(data){
        for(var d in data){
            if($("[name="+d+"]").attr("type") == "text" || $("[name="+d+"]").attr("type") == "datetime"  || $("[name="+d+"]").attr("type") == "textarea"){ 
               $("[name="+d+"]").val(data[d]);
            }else{  
               $("[name="+d+"]").find("option[key="+data[d]+"]").attr("selected","selected");  
            }
        }

        $("[name=letter]").val(data["s_Rack_CodePrefix"]);
          
        if($("[name=Sel_Id]").val()!=""){
         
           f_setcheckboxPick(data["s_Space_BarCode"]);
        }
         
        f_formationRackCode($("[name=s_Warehouse_Code]").val(),$("[name=s_Shopfloor_Code]").val(),$("[name=s_Block_Code]").val());
       
    }

    
    //绑定框架默认加载的文本框事件
    function f_loadEvent(){ 
        

        //刷新编码前缀
        $("[name=FormingNewRules]").live("click",function(){
            f_formationRackCode($("[name=s_Warehouse_Code]").val(),$("[name=s_Shopfloor_Code]").val(),$("[name=s_Block_Code]").val());
        })

        //所属层列改值事件
        $("[name=n_Space_LayerNumber],[name=n_Space_BayNumber]").live("keyup",function(){
            f_formationRackCode($("[name=s_Warehouse_Code]").val(),$("[name=s_Shopfloor_Code]").val(),$("[name=s_Block_Code]").val());
        })

        //只能填写数字
        $("[name=s_Space_Code]").live("keyup",function(){ 
            $(this).val($(this).val().replace(/[^\d]/g,''));
        }); 

        //虚拟库位,溢出库位选择事件
        $("[name=s_Space_IsVirtualLocation]").live("change",function(){
  
            if($(this).find("option:selected").text() == "否"){
               $("[name=s_Space_OverflowLocation]").find("option[key=否]").attr("selected","selected");
            }else{
               $("[name=s_Space_OverflowLocation]").find("option[key=是]").attr("selected","selected");
            }
        })
        $("[name=s_Space_OverflowLocation]").live("change",function(){
      
            if($(this).find("option:selected").text() == "否"){
               $("[name=s_Space_IsVirtualLocation]").find("option[key=否]").attr("selected","selected");
            }else{
               $("[name=s_Space_IsVirtualLocation]").find("option[key=是]").attr("selected","selected");
            }
        })
          

        f_formationRackCode($("[name=s_Warehouse_Code]").val(),$("[name=s_Shopfloor_Code]").val(),$("[name=s_Block_Code]").val());
        
    }

    //形成储位码编码前缀,货架编码前缀
    function f_formationRackCode(s_Warehouse_Code,s_Shopfloor_Code,s_Block_Code){
     

         //分隔符
         var Separator = $("[name=SplitStr]").val();
         //货架编码
         var s_Rack_Code = (parseInt($("[name=s_Rack_Code]").val()) < 10 ? "0"+ parseInt($("[name=s_Rack_Code]").val()):parseInt($("[name=s_Rack_Code]").val()));
         //货架前缀
         var letter = $("[name=letter]").val();
         //货架个数
         var PackCount = 1;
         if(PackCount == "" || PackCount == "0"){
            return; 
         }
         
         //判定是否选中
         if($(".PickedCheckbox").text().indexOf("BlockState")!= -1){
            s_Block_Code = s_Block_Code + Separator;
         }else{
            s_Block_Code = "";
         }
         
         if($(".PickedCheckbox").text().indexOf("ShopFloorState")!= -1){
            s_Shopfloor_Code = s_Shopfloor_Code + Separator;
         }else{
            s_Shopfloor_Code = "";
         }
         
         if($(".PickedCheckbox").text().indexOf("WarehouseState")!= -1){
            s_Warehouse_Code = s_Warehouse_Code + Separator;
         }else{
            s_Warehouse_Code = "";
         }

         if($(".PickedCheckbox").text().indexOf("RackState")!= -1){
            s_Rack_Code = s_Rack_Code + Separator;
         }else{
            s_Rack_Code = "";
         }
         
         //所在层列中的位置:
         $("[name=n_Space_Position]").val("第"+ $("[name=n_Space_BayNumber]").val() +"列的第"+ $("[name=n_Space_LayerNumber]").val() +"层");

         var n_Space_BayNumber = (parseInt($("[name=n_Space_BayNumber]").val())<10?"0"+$("[name=n_Space_BayNumber]").val():$("[name=n_Space_BayNumber]").val()) + Separator
         var n_Space_LayerNumber = parseInt($("[name=n_Space_LayerNumber]").val())<10?"0"+$("[name=n_Space_LayerNumber]").val():$("[name=n_Space_LayerNumber]").val()
          
         var areastr = "";
         
         //储位编码前缀  
         areastr += s_Block_Code.trim()  + s_Shopfloor_Code.trim()  + s_Warehouse_Code.trim()  + letter + s_Rack_Code + n_Space_BayNumber + n_Space_LayerNumber;
          
         $(".packareaItem").find("label").text(areastr);
         $("[name=s_Space_BarCode]").val(areastr); 
    }
    
    //设置选中的文本框
    function f_setcheckboxPick(s_Space_BarCode){ 
        
       if(s_Space_BarCode != $(".packareaItem").val()){ 
          showPackArea._data.Picked = ["ShopFloorState","WarehouseState","RackState"];
          $(".PickedCheckbox").text('["ShopFloorState","WarehouseState","RackState"]');
//          if(s_Space_BarCode != $(".packareaItem").val()){
//             showPackArea._data.Picked = ["WarehouseState","RackState"];
//             $(".PickedCheckbox").text('["WarehouseState","RackState"]');
//             if(s_Space_BarCode != $(".packareaItem").val()){ 
//                showPackArea._data.Picked = ["RackState"]; 
//                $(".PickedCheckbox").text('["RackState"]');
//             }
//          }
       }
    }

    
    //是否是小数
    function checkSmallNum() {
        //检查是否是非数字值
        if (isNaN(this.value)) {
            this.value = "";
        }
        if (this != null) {
            //检查小数点后是否对于两位
            if (this.value.toString().split(".").length > 1 && this.value.toString().split(".")[1].length > 2) {
                alert("所填的结果小数点后最多只能两位，请重新输入！");
                this.value = "";
            }
        }
    }
    
    //是否是数字
    function checkNum() {
        //检查是否是非数字值
        if (isNaN(this.value)) {
            this.value = "";
        } 
    }

    </script>
    @if (ctrl == "add")
    {
        <script type="text/javascript">

            $(function () {
                $("#saveBt").show();
                //渲染插件
                topsRender = $("#paramForm *[fieldType]").pluginRender({ moduleConfig: moduleConfig });

                //数字验证
                $("[name=n_Space_LayerNumber],[name=n_Space_BayNumber],[name=n_Space_MaxPosition],[name=n_Space_ShipmentSequence]").keyup(checkNum);

                //储位信息
                $("[name=s_Space_Code]").val($("[name=Space_MaxCode]").val());
                
                //添加保存
                $("#saveBt").click(function () {
                    $("#module_toolbar input").attr("disabled", "disabled");
                    $("#loading_img").show();
                    //var data = topsRender.serializeData(); 
                    var data = f_getData();

                    $.topsAjax({
                        type: "POST",
                        url: "/AjaxPost/AddSpace",
                        data: data,
                        dealError: false,
                        success: function (data) {
                            if (data.IsSuccess) {
                                alert("保存成功！");
                                //添加成功后刷新列表并关闭标签
                                window.parent.f_flushGrid();
                                window.parent.f_closeTab("Add");
                            } else {
                                if (data.Other1 != null)
                                    topsRender.setError(data.Other1);
                                alert("保存失败：" + data.Msgs[0]);
                            }
                            $("#module_toolbar input").removeAttr("disabled");
                            $("#loading_img").hide();
                        }
                    });
                });
            });
        </script>
    }
    else if (ctrl == "edit")
    {
        <script type="text/javascript">
    var idData =@Html.Raw(Server.UrlDecode(id))
    $(function () {
        $("#saveBt").show();
        $("[name=CodeState]").attr("disabled","disabled");

        //加载数据
        $.topsAjax({
            type: "GET",
            url: "/AjaxGet/SelSpace",
            data: {Sel_Id:$("[name=Sel_Id]").val()},
            dealError: false,
            success: function (data) {
                if (data.IsSuccess) {
                    //渲染插件
                    topsRender = $("#paramForm *[fieldType]").pluginRender({ data: data.Data,moduleConfig: moduleConfig });
                    
                    //数字验证
                    $("[name=n_Space_LayerNumber],[name=n_Space_BayNumber],[name=n_Space_MaxPosition],[name=n_Space_ShipmentSequence]").keyup(checkNum);
                     

                    if(data.Data[0].length>0){
                       f_setData(data.Data[0][0]);
                    }
                } else {
                    alert("获取数据失败：" + data.Msgs[0]);
                }
            }
        });
    
        //保存修改
        $("#saveBt").click(function () {
            $("#module_toolbar input").attr("disabled", "disabled");
            $("#loading_img").show();
            //var data = topsRender.serializeData();
            var data = f_getData();
         
            $.topsAjax({
                type: "POST",
                url: "/AjaxPost/UpdateSpace",
                data: data,
                dealError: false,
                success: function (data) {
                    if (data.IsSuccess) {
                        alert("保存修改成功！");
                        //刷新列表
                        window.parent.f_flushGrid();
                        window.parent.f_closeTab("Modify");
                    } else {
                        if (data.Other1 != null)
                            topsRender.setError(data.Other1);
                        alert("保存修改失败：" + data.Msgs[0]);
                    }
                    $("#module_toolbar input").removeAttr("disabled");
                    $("#loading_img").hide();
                }
            });
        });
         
    });
     
        </script>   
    }
    <script type="text/javascript">
        $(function () {
            detailTab = $("#detaillist").ligerTab({
                onAfterSelectTabItem: function (tabID) {
                    var $g = $("div[tabid=" + tabID + "] div[fieldtype=grid]", $(this.element));
                    if ($g.length == 0) return;
                    var gIndex = $g.attr("objindex");
                    topsRender.find("grid" + gIndex).obj.grid.setWidth();
                }
            });
        });
    </script>
}
