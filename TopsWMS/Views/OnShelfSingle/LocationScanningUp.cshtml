@{
    Layout = "~/TopsLib/Views/Shared/_MobileTemplate.cshtml";

    string ParentIds = string.Empty;
    if (Request.QueryString.AllKeys.Contains("ParentIds"))
    {
        ParentIds = Request.QueryString["ParentIds"];
    }
    //货物编码
    string GoodsCode = Request.QueryString["GoodsCode"];
    if (Request.QueryString.AllKeys.Contains("GoodsCode"))
    {
        GoodsCode = Request.QueryString["GoodsCode"];
    }
    
    //货物标识编码
    string GoodsBarCode = Request.QueryString["GoodsBarCode"];
    if (Request.QueryString.AllKeys.Contains("GoodsBarCode"))
    {
        GoodsBarCode = Request.QueryString["GoodsBarCode"];
    }
    
    //数量
    string GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    if (Request.QueryString.AllKeys.Contains("GoodsWorkQuantity"))
    {
        GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    }
    
    //仓库外键ID
    string n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    if (Request.QueryString.AllKeys.Contains("n_Warehouse_Id"))
    {
        n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    } 

    //下架单据外键ID
    string n_BillStockInOut_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_BillStockInOut_Id"))
    {
        n_BillStockInOut_Id = Request.QueryString["n_BillStockInOut_Id"];
    }

    //单据的录入方式 批量录入[2]，单个录入[1];
    string s_Warehouse_ShelfForm = "2";
    if (Request.QueryString.AllKeys.Contains("s_Warehouse_ShelfForm"))
    {
        s_Warehouse_ShelfForm = Request.QueryString["s_Warehouse_ShelfForm"];
    }
}
@section Body{
    <input type="hidden" name="GoodsCode" value="@(GoodsCode)" />
    <div class="body">
    
        <div v-bind:class="RadioTab_Showed">
            <input type="radio" id="radio1" checked="true" name="radio" value="系统分配" v-on:click="f_radio" /><label for="radio1">系统分配</label>
            <input type="radio" id="radio2" name="radio" value="手工指定" v-on:click="f_radio" /><label for="radio2">手工指定</label>
        </div>
        <div v-bind:class="TitleTab_Showed">
            <table cellspacing="0">
                <tr>
                    <th>
                        库位
                    </th>
                    <th>
                        下架数
                    </th>
                    <th>
                        批次
                    </th>
                    <th>
                        库存数
                    </th>
                </tr>
            </table>
        </div>
        <div v-bind:class="InfoTab_Showed">
            <table cellspacing="0">
                <tr v-for="(item,i) in DataList" :n_ListPutOnOff_Id="item.n_ListPutOnOff_Id" :s_ReportInventoryCurrent_Code="item.s_ReportInventoryCurrent_Code" 
                :s_ReportInventoryCurrent_SurplusNumber="item.s_ReportInventoryCurrent_SurplusNumber" :class="{ 'morechecked':item.s_ReportInventoryCurrent_isCheck }">
                   <td>{{ item.s_ReportInventoryCurrent_Code }}</td>
                   <td>{{ item.s_ReportInventoryCurrent_DownNumber }}</td>
                   <td>{{ item.s_ReportInventoryCurrent_Batch }}</td>
                   <td>{{ item.s_ReportInventoryCurrent_SurplusNumbers }}</td>
                </tr>
            </table>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsWorkQuantity_Showed" name="GoodsWorkQuantity"
                value="@(GoodsWorkQuantity)" placeholder="下架总数" disabled="disabled" readonly="true" />
        </div>
        <div>
            <input type="text" v-bind:class="SpaceBarCode_Showed" name="SpaceBarCode" placeholder="请输入库位码" v-on:keyup.enter="f_reSureSpaceCode" />
        </div>
        
        <div v-bind:class="button_Div_Showed">
            <div v-on:click="f_SaveBillStockInOut">
                确认下架</div>
        </div>
    </div>
}
@section Script{
    <style type="text/css">
        .TitleTab
        {
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
        }
        .TitleTab table
        {
            width: 100%;
            height: 100%;
        }
        .TitleTab th
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            background: rgb(200 220 232);
        }
        
        .InfoTab
        {
            width: calc(90%);
            max-height: 132px;
            min-height: 132px;
            margin: calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
            overflow-y: scroll;
        }
        .InfoTab table
        {
            width: 100%;
            height: 100%;
        }
        .InfoTab td
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        }
        
        .GoodsWorkQuantity
        {
            width: calc(90%);
            margin: calc(2.5%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        .SpaceBarCode
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        
        
        .button_Div div
        {
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(2%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        .RadioTab
        { 
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
        }
        
        
        .morechecked
        {
            background:#a5e0a5;
        }
    </style>
    <script type="text/javascript">
        var ajaxhelper = new ajaxHelper();

        //ajax Post请求
        var ajaxFirst = null;

        $(function () {
            var vue = new Vue({
                el: ".body",
                data: {
                    RadioTab_Showed: "RadioTab", //单选框样式
                    TitleTab_Showed: "TitleTab", //结果标题表格样式
                    InfoTab_Showed: "InfoTab",   //结果表格样式
                    GoodsWorkQuantity_Showed: "GoodsWorkQuantity",   //数量样式
                    SpaceBarCode_Showed: "SpaceBarCode",   //库位码样式
                    button_Div_Showed:"button_Div", //按钮样式
                    DataList:[] //结果表格数据
                },
                methods: {
                    //加载页面后执行
                    f_reloadPage: function () {

                        //给标题
                        window.parent.$(".top").find("label").text("条码扫描");
                        //阻止键盘弹出
                        f_preventKeyBoard();
                        
                        //判定是否存在父窗口
                        if (window.top == window.self) {
                            //加载返回事件 
                            window.parent.f_loadEvent("../../../../OnShelfSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                             + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity"+"&n_Warehouse_Id="+"@(n_Warehouse_Id)"+"&GoodsBarCode="+"@(GoodsBarCode)"+"&n_BillStockInOut_Id="+"@(n_BillStockInOut_Id)");
                        } else {

                            //返回
                            $("#btnBotton").click(function () {

                                location.href = "../../../../OnShelfSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                             + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity"+"&n_Warehouse_Id="+"@(n_Warehouse_Id)"+"&GoodsBarCode="+"@(GoodsBarCode)"+"&n_BillStockInOut_Id="+"@(n_BillStockInOut_Id)";
                            })
                        }


                        //库位码焦点
                        $(".SpaceBarCode").focus().select();

                        //初始化该货物的库位分配信息
                        vue.f_SelPutOnOffSingleReportInventoryCurrent();
                    },
                    //初始化该货物的库位分配信息
                    f_SelPutOnOffSingleReportInventoryCurrent: function () {

                        //对象名 根据货物编码匹配出对应的库存信息
                        var objectName = "SelOnShelfSingleReportInventoryCurrent";
                        //传递参数
                        var param = { s_ReportInventoryCurrent_GoodsProductCode:$("[name=GoodsCode]").val()
                        , n_Warehouse_Id: "@(n_Warehouse_Id)", s_ReportInventoryCurrent_QualityStatus: 1
                        , n_BillStockInOut_Id: "@(n_BillStockInOut_Id)"
                        };

                        ajaxhelper.ajax_Get(objectName,param,function(result){
                            if(result.IsSuccess){
                               if(result.Data[0].length > 0){
                                  //获取提交的数量信息 
                                  var GoodsWorkQuantity = "@(GoodsWorkQuantity)"; 
                                  //获取显示行的集合
                                  var arr = new Array();
                                  //清空
                                  vue.DataList = [];

                                  $.each(result.Data[0],function(index,value){
                                
                                       if(value.s_ReportInventoryCurrent_SurplusNumber == "---"){
                                            arr.push({
                                                s_ReportInventoryCurrent_Code:value.s_ReportInventoryCurrent_Code,
                                                s_ReportInventoryCurrent_DownNumber:GoodsWorkQuantity,
                                                //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                s_ReportInventoryCurrent_SurplusNumber:"---",
                                                s_ReportInventoryCurrent_SurplusNumbers:"---",
                                                s_ReportInventoryCurrent_isCheck:false,
                                                s_ReportInventoryCurrent_GoodsProductCode:$("[name=GoodsCode]").val(),
                                                s_ListStockInOut_QualityStatus:1,
                                                s_ReportInventoryCurrent_Batch:value.s_ReportInventoryCurrent_Batch,
                                                s_ReportInventoryCurrent_GoodsBarCode:"@(GoodsBarCode)",
                                                n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                n_BillStockInOut_Id:"@(n_BillStockInOut_Id)",
                                                n_ReportInventoryCurrent_Id:value.n_ReportInventoryCurrent_Id

                                            })
                                            return false;
                                       }else if(value.s_ReportInventoryCurrent_SurplusNumber != "---" && value.s_ReportInventoryCurrent_SurplusNumber != 0){
                                            //如果当前库位剩余数无法满足当前下架数量，则继续遍历下一个库位进行分配
                                            if( parseInt(GoodsWorkQuantity) > parseInt(value.s_ReportInventoryCurrent_SurplusNumber)){
                                                arr.push({
                                                    s_ReportInventoryCurrent_Code:value.s_ReportInventoryCurrent_Code,
                                                    s_ReportInventoryCurrent_DownNumber:value.s_ReportInventoryCurrent_SurplusNumber,
                                                    //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                    s_ReportInventoryCurrent_SurplusNumber:0,
                                                    s_ReportInventoryCurrent_SurplusNumbers:value.s_ReportInventoryCurrent_SurplusNumber,
                                                    s_ReportInventoryCurrent_isCheck:false,
                                                    s_ReportInventoryCurrent_GoodsProductCode:$("[name=GoodsCode]").val(),
                                                    s_ListStockInOut_QualityStatus:1,
                                                    s_ReportInventoryCurrent_Batch:value.s_ReportInventoryCurrent_Batch,
                                                    s_ReportInventoryCurrent_GoodsBarCode:"@(GoodsBarCode)",
                                                    n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                    s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                    n_BillStockInOut_Id:"@(n_BillStockInOut_Id)",
                                                    n_ReportInventoryCurrent_Id:value.n_ReportInventoryCurrent_Id
                                                })
                                                GoodsWorkQuantity = parseInt(GoodsWorkQuantity) - parseInt(value.s_ReportInventoryCurrent_SurplusNumber); 

                                            }else{
                                                arr.push({
                                                    s_ReportInventoryCurrent_Code:value.s_ReportInventoryCurrent_Code,
                                                    s_ReportInventoryCurrent_DownNumber:GoodsWorkQuantity,
                                                    //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                    s_ReportInventoryCurrent_SurplusNumber:value.s_ReportInventoryCurrent_SurplusNumber - GoodsWorkQuantity, 
                                                    s_ReportInventoryCurrent_SurplusNumbers:value.s_ReportInventoryCurrent_SurplusNumber,
                                                    s_ReportInventoryCurrent_isCheck:false,
                                                    s_ReportInventoryCurrent_GoodsProductCode: $("[name=GoodsCode]").val(),
                                                    s_ListStockInOut_QualityStatus:1,
                                                    s_ReportInventoryCurrent_Batch:value.s_ReportInventoryCurrent_Batch,
                                                    s_ReportInventoryCurrent_GoodsBarCode:"@(GoodsBarCode)",
                                                    n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                    s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                    n_BillStockInOut_Id:"@(n_BillStockInOut_Id)",
                                                    n_ReportInventoryCurrent_Id:value.n_ReportInventoryCurrent_Id
                                                })
                                                return false;
                                            }
                                       } 
                                  }) 

                                  vue.DataList = arr;
                               }
                            }
                        },function(result){

                            f_commonShowMsg(result.Msgs[0]);
                        })
                    },
                    //进行下架确认
                    f_SaveBillStockInOut: function () {

                        var obj = event.target;
                        if ($(obj).is("[disabled]")) {
                            return;
                        }

                        //重复请求处理
                        if(ajaxFirst!=null){
                            ajaxFirst.abort();
                            ajaxFirst = null;
                            return;
                        }

                        $(obj).attr("disabled", "disabled");

                        //自动触发确认库位文本框的回车事件
                        vue.f_reSureSpaceCode();
                        
                        //获取未进行确认库位的记录，并判定是否全部已经确认库位
                        var arr = vue.DataList.filter(function(result){
                             return result.s_ReportInventoryCurrent_isCheck == false; 
                        });

                        if(arr.length > 0){
                           f_commonShowMsg("当前还有未进行库位确认的记录，请全部库位确认完毕再点击下架!"); 
                           //重新焦点
                           $(".SpaceBarCode").val("").focus();

                           $(obj).removeAttr("disabled");
                           return;
                        }
                         
                        //对象名 新增货物入库记录以及下架记录
                        var objectName = "InsertOnShelfSingleListStockInOut";

                        var param = { Dictionary:vue.DataList };

                        ajaxFirst = ajaxhelper.ajax_Post(objectName,param,function(result){
                            
                            f_commonShowMsg("下架成功!");

                            //跳转到条码扫描界面
                            setTimeout('location.href = "/OnShelfSingle/AddBillStockInOutDetail?ParentIds=" + "@ParentIds" + "&GoodsCode=" + "&GoodsWorkQuantity="+"&n_Warehouse_Id="+"@(n_Warehouse_Id)"+"&GoodsBarCode=" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)"',3000);
                            
                            ajaxFirst = null;
                        },function(result){
                        
                            f_commonShowMsg(result.Msgs[0]);
                            ajaxFirst = null;

                            $(obj).removeAttr("disabled");
                        })
                    },
                    //选中库位匹配方式
                    f_radio: function (event) {
                        if ($(event.target).attr("value") == "手工指定") {

                            //跳转至手工库位扫描界面
                            location.href = "LocationScanningManualUp?ParentIds=" + "@ParentIds" + "&GoodsCode=" + "@(GoodsCode)" + "&GoodsBarCode=" + "@(GoodsBarCode)"
                        + "&GoodsWorkQuantity=" + "@(GoodsWorkQuantity)" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&s_Warehouse_ShelfForm=" + "@(s_Warehouse_ShelfForm)";

                        }
                    },
                    //确认库位
                    f_reSureSpaceCode:function(){ 
                        //获取库位编码
                        var SpaceBarCode = $("[name=SpaceBarCode]").val();
                         
                        $.each(vue.DataList,function(index,value){
                            if(value.s_ReportInventoryCurrent_Code == SpaceBarCode){
                                value.s_ReportInventoryCurrent_isCheck = true; 
                            }
                        })  

                        //清空
                        $("[name=SpaceBarCode]").val("").focus();
                    },
                    //验证所填是否是数字,不是则清空
                    checkNum: function () {
                        //检查是否是非数字值
                        if (isNaN($(event.target).val())) {
                            $(event.target).val("");
                        }
                    }
                }
            })

            //加载页面后执行
            vue.f_reloadPage();
        })
    </script>
}
