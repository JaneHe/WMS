@{
    Layout = "~/TopsLib/Views/Shared/_MobileTemplate.cshtml";

    string ParentIds = Request.QueryString["ParentIds"];
     

    //数量
    string GoodsWorkQuantity = string.Empty;
    if (Request.QueryString.AllKeys.Contains("GoodsWorkQuantity"))
    {
        GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    }

    //仓库ID
    string n_Warehouse_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_Warehouse_Id"))
    {
        n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    }

    //货物标识编码
    string GoodsBarCode = string.Empty;
    if (Request.QueryString.AllKeys.Contains("GoodsBarCode"))
    {
        GoodsBarCode = Request.QueryString["GoodsBarCode"];
    }

    //下架单据外键ID
    string n_BillStockInOut_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_BillStockInOut_Id"))
    {
        n_BillStockInOut_Id = Request.QueryString["n_BillStockInOut_Id"];
    }
}
@section Body{
    <div class="body">
        <div class="RadioTab">
            <input type="radio" id="radio1" name="radio" value="批量录入" v-on:click="f_radio" /><label for="radio1">批量录入</label>
            <input type="radio" id="radio2" checked="true" name="radio" value="单件录入" v-on:click="f_radio" /><label for="radio2">单件录入</label>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsBarCode_Showed" placeholder="请输入条码" v-on:keyup.enter="f_keyupGoodsBarCode" value="@(GoodsBarCode)" />
        </div> 
        <div v-bind:class="InfoTab_Showed" :GoodsBarCode="GoodsInfo_Obj.GoodsBarCode">
            <table cellspacing="0">
                <tr>
                    <td>
                        条码
                    </td>
                    <td colspan="3">
                    {{ GoodsInfo_Obj.GoodsBarCode }}
                    </td>
                </tr>
                <tr>
                    <td>
                        工件编码
                    </td>
                    <td colspan="3">
                    {{ GoodsInfo_Obj.s_CustomerCode }}
                    </td>
                </tr>
                <tr>
                    <td>
                        工件名称
                    </td>
                    <td colspan="3">
                    {{ GoodsInfo_Obj.s_Mother_Desc }}
                    </td>
                </tr>
                <tr>
                    <td>
                        车型
                    </td>
                    <td>
                    {{ GoodsInfo_Obj.s_Brand }}
                    </td>
                    <td>
                        颜色
                    </td>
                    <td>
                    {{ GoodsInfo_Obj.s_Color }}
                    </td>
                </tr>
                <tr>
                    <td>
                        未提交下架 
                    </td>
                    <td>
                    {{ GoodsInfo_Obj.n_BillStockInOut_DownNumber }}
                    </td>
                    <td>
                        库位存量
                    </td>
                    <td>
                    {{ GoodsInfo_Obj.n_ReportInventoryCurrent_Number }}
                    </td>
                </tr>
            </table>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsWorkQuantity_Showed" placeholder="请输入数量" value="1" v-on:keyup="checkNum" disabled="disabled" />
        </div>
        <div v-bind:class="button_Div_Showed">
            <div v-on:click="f_SaveBillStockInOut">
                确认新建</div>
        </div>
    </div>
}
@section Script{
    <style type="text/css">
        .InfoTab
        {
            width: calc(90%);
            height: 162px;
            margin: calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
        }
        .InfoTab table
        {
            width: 100%;
            height: 100%;
        }
        
        .InfoTab td
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            /*line-height: 20%;*/
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        }  
        
        .GoodsBarCode, .GoodsWorkQuantity
        {
            width: calc(90%);
            margin: calc(3%) calc(5%);
            border: 1px solid lightblue;
            height: 22px;
            text-align: center;
        }
        
        .button_Div div
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2.5%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        .checkbtn_Div div
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 14px;
            line-height: 30px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        
        .RadioTab
        { 
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
        }
    </style>
    <script type="text/javascript">
        var ajaxhelper = new ajaxHelper();

        //ajax Post请求变量
        var ajaxobjFirst = null;

        //ajax Get请求变量
        var ajaxobjSecond = null;

        $(function () {
            var vue = new Vue({
                el: ".body",
                data: {
                    InfoTab_Showed: "InfoTab", //结果表格样式 
                    GoodsBarCode_Showed: "GoodsBarCode", //货物标签条码文本框样式
                    GoodsWorkQuantity_Showed: "GoodsWorkQuantity", //数量文本框样式
                    button_Div_Showed: "button_Div", //按钮样式 
                    GoodsInfo_Obj: new Object()  //货物数据源 
                },
                methods: {
                    //货物标识条码文本框回车事件
                    f_keyupGoodsBarCode: function () {
                        //重复请求处理
                        if (ajaxobjSecond != null) {
                            ajaxobjSecond.abort();
                            ajaxobjSecond = null;
                            return;
                        }

                        //获取货物标识条码
                        var GoodsBarCode = $(".GoodsBarCode").val();
                        //对象名 
                        var objectName = "SelOnShelfSingleGoodsInfo_Single";
                        //传递参数
                        var param = {
                            GoodsBarCode: GoodsBarCode,
                            n_Warehouse_Id: "@(n_Warehouse_Id)",
                            s_ReportInventoryCurrent_QualityStatus: 1,
                            n_BillStockInOut_Id: "@(n_BillStockInOut_Id)"
                        };

                        ajaxobjSecond = ajaxhelper.ajax_Get(objectName, param, function (result) {
                            //清空数据
                            vue.f_emptyInfoTab();

                            if (result.IsSuccess) {
                                if (result.Data[0].length > 0) {
                                    //根据存货基础信息的库位代码对应的可出仓库的信息，与当前单据的仓库信息查看两者是否对应
                                    //不对应则提示该件不可出库
                                    var n_Warehouse_Ids = parseInt(result.Data[1][0].IsSameWarehouse);

                                    //该单据的仓库对应的上存货基础信息的对应的库位信息，(取消)或者没有指定库位信息的产品可通过
                                    if (n_Warehouse_Ids > 0) {

                                        vue.GoodsInfo_Obj = result.Data[0][0];

                                        //货物标识条码赋值
                                        vue.GoodsInfo_Obj.GoodsBarCode = $(".GoodsBarCode").val();
                                        //货物编码赋值
                                        vue.GoodsInfo_Obj.GoodsCode = vue.GoodsInfo_Obj.s_CustomerCode;

                                    } else {
                                        f_commonShowMsg("该条码对应的工件不是该库区指定可出库的工件,详情请看存货基础信息!");

                                        //焦点聚焦于条码文本框
                                        $(".GoodsBarCode").val("").focus();
                                        return;
                                    }

                                    //焦点聚焦于条码文本框
                                    $(".GoodsBarCode").val(""); 
                                } else {

                                    f_commonShowMsg("该条码无对应的工件信息，请确认BOM是否有该工件信息!");
                                    //焦点聚焦于货物标识条码文本框
                                    $(".GoodsBarCode").val("").focus();
                                }
                            }
                            ajaxobjSecond = null;

                        }, function (result) {
                            f_commonShowMsg(result.Msgs[0]);
                            //焦点聚焦于货物标识条码文本框
                            $(".GoodsBarCode").val("").focus();
                            ajaxobjSecond = null;
                        })


                    },
                    //保存下架单据记录,跳转到下架库存扫描进行保存
                    f_SaveBillStockInOut: function () {
                        //获取条码信息
                        var GoodsBarCode = vue.GoodsInfo_Obj.s_LogCode;
                        //判定是否有对应的编码信息，没有则不允许进入下架库存扫描
                        if (GoodsBarCode == "") {
                            f_commonShowMsg("该条码无对应的工件信息，请确认BOM是否有该工件信息!");
                            //重新焦点
                            $(".GoodsBarCode").val("").focus();
                            return;
                        }

                        //获取库位容量
                        var n_ReportInventoryCurrent_Number = vue.GoodsInfo_Obj.n_ReportInventoryCurrent_Number;

                        //判定是否有库存，没有则不允许进入下架库存扫描
                        if (n_ReportInventoryCurrent_Number == "0") {
                            f_commonShowMsg("该条码对应的工件在该仓库内无对应的库存,请重新输入!");
                            //重新焦点
                            $(".GoodsBarCode").val("").focus();
                            return;
                        }

                        //获取数量信息
                        var GoodsWorkQuantity = $(".GoodsWorkQuantity").val();

                        //判定是否有对应的数量，没有则不允许进入下架库存扫描
                        if (GoodsWorkQuantity == "") {
                            f_commonShowMsg("请输入数量,才能确认新建!");
                            //重新焦点
                            $(".GoodsWorkQuantity").val("").focus();
                            return;
                        } else if (parseFloat(GoodsWorkQuantity) < 0) {
                            f_commonShowMsg("输入的数量不能小于0,请重新输入!");
                            //重新焦点
                            $(".GoodsWorkQuantity").val("").focus();
                            return;
                        }

                        //获取剩余数量
                        var ReportInventoryCurrentNumber = vue.GoodsInfo_Obj.n_ReportInventoryCurrent_Number;
                        //获取未提交的下架单据的数量
                        var BillStockInOutDownNumber = vue.GoodsInfo_Obj.n_BillStockInOut_DownNumber;

                        //判定输入数量不能超过已存在的库存数量 - 未提交的下架单据的数量
                        if (GoodsWorkQuantity > ReportInventoryCurrentNumber - BillStockInOutDownNumber) {
                            f_commonShowMsg("输入的数量已超过当前该工件在库的库存数量，请重新输入!");
                            //重新焦点
                            $(".GoodsWorkQuantity").val("").focus();
                            return;
                        } 
                         

                        //跳转至库位扫描界面
                        location.href = "LocationScanningUpSingle?ParentIds=" + "@ParentIds" + "&GoodsBarCode=" + GoodsBarCode
                        + "&GoodsWorkQuantity=" + GoodsWorkQuantity + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&s_Warehouse_ShelfForm=1";

                    },
                    //加载页面后执行
                    f_reloadPage: function () {

                        //给标题
                        window.parent.$(".top").find("label").text("条码扫描");
                        //阻止键盘弹出
                        f_preventKeyBoard();

                        //判定是否存在父窗口
                        if (window.top == window.self) {
                            //加载返回事件 
                            window.parent.f_loadEvent("../../../../OnShelfSingle/Index?ParentIds=" + "@ParentIds");
                        } else {

                            //返回
                            $("#btnBotton").click(function () {

                                location.href = "../../../../OnShelfSingle/Index?ParentIds=" + "@ParentIds";
                            })
                        }


                        //货物标识编码不为空时,则进行货物信息查询
                        if ($(".GoodsBarCode").val() != "") {
                            vue.f_keyupGoodsBarCode();
                        } else {
                            $(".GoodsBarCode").val("").focus();
                        }
                    },
                    //清空数据
                    f_emptyInfoTab: function () {

                        vue.GoodsInfo_Obj = new Object();
                        vue.StorageAllocationMethod_Obj = new Object();

                    },
                    //选择货物编码
                    f_CheckGoodsBarCode: function () {

                        //跳转到选择货物编码页
                        location.href = "CheckGoodsBarCode?ParentIds=" + "@(ParentIds)" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)";
                    },
                    //选中库位匹配方式
                    f_radio: function (event) {
                        if ($(event.target).attr("value") == "批量录入") {

                            //跳转至单件录入扫描界面 
                            location.href = "AddBillStockInOutDetail?ParentIds=" + "@(ParentIds)" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)";
                        }
                    },
                    //验证所填是否是数字,不是则清空
                    checkNum: function () {
                        //检查是否是非数字值
                        if (isNaN($(event.target).val())) {
                            $(event.target).val("");
                        }
                    }
                }
            })

            //加载页面后执行
            vue.f_reloadPage();
        })
    </script>
}
