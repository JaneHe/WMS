@{
    Layout = "~/TopsLib/Views/Shared/_MobileTemplate.cshtml";

    string ParentIds = Request.QueryString["ParentIds"];

    //货物编码
    string GoodsCode = string.Empty;
    if (Request.QueryString.AllKeys.Contains("GoodsCode"))
    {
        GoodsCode = Request.QueryString["GoodsCode"];
    }

    //数量
    string GoodsWorkQuantity = string.Empty;
    if (Request.QueryString.AllKeys.Contains("GoodsWorkQuantity"))
    {
        GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    }
    if(GoodsWorkQuantity.IndexOf(",") != -1){
        string[] str = GoodsWorkQuantity.Split(',');
        
        int result = 0;
        foreach(string s in str){
            result += int.Parse((string.IsNullOrEmpty(s) ? "0" : s));  
        }
        GoodsWorkQuantity = result.ToString();
    }
    
    
    //仓库ID
    string n_Warehouse_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_Warehouse_Id"))
    {
        n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    }

    //货物标识编码
    string GoodsBarCode = string.Empty;
    if (Request.QueryString.AllKeys.Contains("GoodsBarCode"))
    {
        GoodsBarCode = Request.QueryString["GoodsBarCode"];
    }

    //上架单据外键ID
    string n_BillStockInOut_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_BillStockInOut_Id"))
    {
        n_BillStockInOut_Id = Request.QueryString["n_BillStockInOut_Id"];
    }

    //器具条码
    string s_BinBarCode = string.Empty;
    if (Request.QueryString.AllKeys.Contains("s_BinBarCode"))
    {
        s_BinBarCode = Request.QueryString["s_BinBarCode"];
    } 
     
    //器具ID
    string s_BinId = string.Empty;
    if (Request.QueryString.AllKeys.Contains("s_BinId"))
    {
        s_BinId = Request.QueryString["s_BinId"];
    }
    
    if(!string.IsNullOrEmpty(s_BinBarCode)){

        string[] arr = s_BinBarCode.Substring(0, s_BinBarCode.Length - 1).Split(',');
        string str = string.Empty;

        for (int index = 0; index < arr.Length; index++)
        {

            var Biz = Tops.FRM.Biz.Execute("SelBinInfoByBarCodes", new System.Data.SqlClient.SqlParameter[] { 
                new System.Data.SqlClient.SqlParameter { ParameterName = "s_Bin_Code", Value = arr[index] } 
            }, Tops.FRM.BizType.Query);

            List<System.Data.DataTable> list = Biz.Data as List<System.Data.DataTable>;

            if (list[0].Rows.Count > 0)
            {
                s_BinId += list[0].Rows[0]["n_Bin_Id"] + ",";
            }
        } 
    }
    
}
@section Body{
    <div class="body">
        <input type="hidden" name="s_BinBarCode" value="@(s_BinBarCode)" />  
        <input type="hidden" name="s_BinId" value="@(s_BinId)" /> 
        <div class="RadioTab">
            <input type="radio" id="radio1" name="radio" value="批量录入" v-on:click="f_radio" /><label for="radio1">批量录入</label>
            <input type="radio" id="radio2" checked="true" name="radio" value="单件录入" v-on:click="f_radio" /><label for="radio2">单件录入</label>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsBarCode_Showed" placeholder="请输入条码" v-on:keyup.enter="f_keyupGoodsBarCode"  />
        </div>  
        <div v-bind:class="TitleTab_Showed">
            <table cellspacing="0">
                <tr>
                    <th>条码数</th>
                    <th style="background:white;">{{ InfoDataList.length }}</th> 
                    <th>器具码</th>
                    <th style="background:white;">{{ BinCode }}</th> 
                </tr>
                <tr>
                    <th>条码</th> 
                    <th colspan="2">产品编码<br />
                    产品名称</th>
                    <th>批次</th>
                </tr>
            </table>
        </div> 
        <div v-bind:class="InfoTab_Showed">
            <table cellspacing="0">
                <tr v-for="(item,i) in InfoDataList" :index="i" :s_PartDescription_Model="item.s_PartDescription_Model" :class="{ 'morechecked':item.n_isCheck }" v-on:click="f_checkRecord">
                    <td> 
                    {{ item.s_LogCode.indexOf(item.s_CustomerCode) > -1 && item.s_LogCode != item.s_CustomerCode ? item.s_CustomerCode : "" }} <br /> 
                    {{ item.s_LogCode.indexOf(item.s_CustomerCode) > -1 && item.s_LogCode != item.s_CustomerCode ?
                     item.s_LogCode.substring(item.s_LogCode.length - 10,item.s_LogCode.length) 
                     :item.s_LogCode }} 
                    </td>
                    <td colspan="2">{{ item.s_CustomerCode }} / <br />
                    {{ item.s_Mother_Desc }}  </td>
                    <td>{{ item.s_Batch }}</td>
                </tr>
            </table>
        </div> 
        <div>
            <input type="text" v-bind:class="BinBarCode_Showed" placeholder="请输入器具条码" v-on:keyup.enter="f_selBinInfo"  />
        </div>  
        <div v-bind:class="button_Div_Showed">
            <div v-on:click="f_DelBillStockInOutDetail($event)">
                删除</div>
            <div v-on:click="f_SaveBillStockInOut">
                确认新建</div>
        </div>
        
        <!--遮罩层-->
        <div class="shadow" v-show="IsShadowShow === true">
        </div>
    </div>
}
@section Script{
    <style type="text/css">
        .TitleTab
        {
            width: calc(90%);
            height: 70px;
            margin: calc(3%) calc(5%) calc(0%) calc(5%);
            text-align: center;
        }
        .TitleTab table, .InfoTab table
        {
            width: 100%;
            border-collapse: collapse;
        }
        .TitleTab tr th:nth-child(1) 
        {
            width: 30%;
            border: 1px solid #a5e0a5;
            background: rgb(200 220 232);
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        } 
        .TitleTab tr th:nth-child(2)
        {
            width: 20%;
            border: 1px solid #a5e0a5;
            background: rgb(200 220 232);
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        } 
        .TitleTab tr th:nth-child(3) 
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            background: rgb(200 220 232);
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        } 
        .TitleTab tr th:nth-child(4) 
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            background: rgb(200 220 232);
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        } 
        
        .InfoTab
        {
            width: calc(90%); 
            max-height: 150px;
            min-height: 150px;
            margin: calc(0%) calc(5%) calc(3%) calc(5%);
            text-align: center; 
            overflow-y:scroll;
        }
        .InfoTab table
        {
            width: 100%;
            height: 100%;
        }
        .InfoTab td:nth-child(1)
        {
            width: 30%;
            border: 1px solid #a5e0a5; 
            font-family: 微软雅黑;
            font-weight: normal;
            line-height:22px;
            font-size: 12px;
        }
        .InfoTab td:nth-child(2)
        {
            width: 45%;
            border: 1px solid #a5e0a5; 
            font-family: 微软雅黑;
            font-weight: normal;
            line-height:22px;
            font-size: 12px;
        }
        .InfoTab td:nth-child(3)
        {
            width: 25%;
            border: 1px solid #a5e0a5; 
            font-family: 微软雅黑;
            font-weight: normal;
            line-height:22px;
            font-size: 12px;
        } 
        
        .GoodsBarCode, .GoodsWorkQuantity,.BinBarCode
        {
            width: calc(90%);
            margin: calc(3%) calc(5%) calc(0%) calc(5%);
            border: 1px solid lightblue;
            height: 22px;
            text-align: center;
        }
        
        .button_Div div:nth-child(1)
        {
            width: calc(44%);
            margin: calc(3%) calc(2.5%) calc(3.5%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        } 
        .button_Div div:nth-child(2)
        {
            width: calc(44%);
            margin: calc(3%) calc(1%) calc(3.5%) calc(0%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        .SpaceAmount
        { 
            width: calc(90%);
            margin: calc(2.5%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;   
        }
        
        .RadioTab
        { 
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
        }
        
        
        .shadow {
            width: 100%;
            height: 100%;
            position: absolute;
            left: 0;
            top: 0;
            z-index: 998;
            background-color: #000;
            opacity: 0.6;
        }
        
        .morechecked
        {
            background:#a5e0a5;
        }
    </style>
    <script type="text/javascript">
        var ajaxhelper = new ajaxHelper();

        //ajax Post请求变量
        var ajaxobjFirst = null;

        //ajax Get请求变量
        var ajaxobjSecond = null;

        $(function () {
            var vue = new Vue({
                el: ".body",
                data: {
                    TitleTab_Showed: "TitleTab", //标题结果表格样式 
                    InfoTab_Showed: "InfoTab", //结果表格样式 
                    BinBarCode_Showed: "BinBarCode", //器具条码样式
                    GoodsBarCode_Showed: "GoodsBarCode", //货物标签条码文本框样式
                    GoodsWorkQuantity_Showed: "GoodsWorkQuantity", //数量文本框样式
                    button_Div_Showed: "button_Div", //按钮样式
                    SpaceAmount_Showed: "SpaceAmount",
                    BinCode: "", //器具码显示
                    IsShadowShow: false,
                    InfoDataList: new Array() //货物信息数据源
                },
                methods: {
                    //货物标识条码文本框回车事件
                    f_keyupGoodsBarCode: function () {
                        //重复请求处理
                        if (ajaxobjSecond != null) {
                            ajaxobjSecond.abort();
                            ajaxobjSecond = null;
                            return;
                        }

                        //获取货物标识条码
                        var GoodsBarCode = $(".GoodsBarCode").val();
                        //对象名 根据喷涂下线QA码查询到相应的货物信息
                        var objectName = "SelPackingPutOnOffSingleGoodsInfo_Single";
                        //传递参数
                        var param = { GoodsBarCode: GoodsBarCode, n_Warehouse_Id: "@(n_Warehouse_Id)" };

                        ajaxobjSecond = ajaxhelper.ajax_Get(objectName, param, function (result) {

                            if (result.IsSuccess) {

                                if (result.Data[0].length > 0) {
                                    //获取器具编码
                                    var s_BinBarCode = $("[name=s_BinBarCode]").val();
                                    //获取器具ID
                                    var s_BinId = $("[name=s_BinId]").val();
                                    //储位分配方式
                                    var s_Warehouse_StorageAllocationMethod = result.Data[1].s_Warehouse_StorageAllocationMethod;

                                    //根据存货基础信息的库位代码对应的可入仓库的信息，与当前单据的仓库信息查看两者是否对应
                                    //不对应则提示该件不可入库
                                    var n_Warehouse_Ids = parseInt(result.Data[2][0].IsSameWarehouse);
                                    var n_Warehouse_Id = "@(n_Warehouse_Id)";

                                    //该单据的仓库对应的上存货基础信息的对应的库位信息，(取消)或者没有指定库位信息的产品可通过
                                    if (n_Warehouse_Ids > 0) {

                                        //查询当前仓库中是否已经上架该条码，如果是的话则不允许其进行再次上架
                                        if (result.Data[3][0].IsExistsInventory == 0) {

                                            var arr = vue.InfoDataList.filter(function (item) {
                                                return item.s_GoodsBarCode == $(".GoodsBarCode").val();
                                            })
                                            if (arr.length > 0) {

                                                f_commonShowMsg("该条码已经录入过,请重新确认!");

                                                //焦点聚焦于货物标识条码文本框
                                                $(".GoodsBarCode").val("").focus();
                                                return;
                                            }

                                            result.Data[0].forEach(function (value, index) {
                                                vue.InfoDataList.push({
                                                    s_Mother_Desc: value.s_Mother_Desc,
                                                    s_CustomerCode: value.s_CustomerCode,
                                                    s_CarColor: value.s_CarColor,
                                                    s_Batch: value.s_Batch,
                                                    s_BinId: "",
                                                    s_LogCode: value.s_LogCode,
                                                    s_BinBarCode: "",
                                                    s_GoodsBarCode: $(".GoodsBarCode").val(),
                                                    s_MotherCode: value.s_MotherCode,
                                                    n_Amount: 1,
                                                    n_isCheck: false,
                                                    s_PartDescription_Model: value.s_PartDescription_Model,
                                                    s_Warehouse_StorageAllocationMethod: result.Data[1][0].s_Warehouse_StorageAllocationMethod,
                                                    f_PartDescription_InventoryCapacity: value.s_PartDescription_PullInventory
                                                })
                                            })
                                        } else {
                                            f_commonShowMsg("该条码已经在系统储位中,请重新确认!");

                                            //焦点聚焦于货物标识条码文本框
                                            $(".GoodsBarCode").val("").focus();
                                            return;

                                        }
                                    } else {
                                        f_commonShowMsg("该条码对应的工件不是该库区指定可入库的工件,详情请看存货基础信息!");

                                        //焦点聚焦于货物标识条码文本框
                                        $(".GoodsBarCode").val("").focus();
                                        return;
                                    }


                                    if (s_BinBarCode.indexOf(",") != -1) {
                                        //获取器具编码
                                        var arr = $("[name=s_BinBarCode]").val().split(",");
                                        for (var index = 0; index < arr.length; index++) {
                                            if (index < vue.InfoDataList.length) {
                                                vue.InfoDataList[index].s_BinBarCode = arr[index];
                                            }
                                        }
                                    }

                                    if (s_BinId.indexOf(",") != -1) {
                                        //获取器具ID
                                        var arr = $("[name=s_BinId]").val().split(",");
                                        for (var index = 0; index < arr.length; index++) {
                                            if (index < vue.InfoDataList.length) {
                                                vue.InfoDataList[index].s_BinId = arr[index];
                                            }
                                        }
                                    }

                                    //焦点聚焦于数量文本框
                                    $(".GoodsBarCode").val("");
                                    $(".GoodsWorkQuantity").val("").focus();
                                } else {

                                    f_commonShowMsg("该条码无对应的工件信息，请确认BOM是否有该工件信息!");
                                    //焦点聚焦于货物标识条码文本框
                                    $(".GoodsBarCode").val("").focus();
                                }
                            }
                            ajaxobjSecond = null;
                        }, function (result) {
                            f_commonShowMsg(result.Msgs[0]);
                            //焦点聚焦于货物标识条码文本框
                            $(".GoodsBarCode").val("").focus();
                            ajaxobjSecond = null;
                        })


                    },
                    //保存上架单据记录,跳转到上架库存扫描进行保存
                    f_SaveBillStockInOut: function () {

                        //判定是否有对应的信息，没有则不允许进入上架库存扫描
                        if (vue.InfoDataList.length == 0) {
                            f_commonShowMsg("该条码无对应的工件信息，请确认BOM是否有该工件信息!");
                            return;
                        }

                        if (vue.InfoDataList[0].s_BinBarCode == "") {

                            f_commonShowMsg("请输入器具条码,才能确认新建!");
                            $(".BinBarCode").focus().select();
                            return;
                        }

                        if (parseInt(vue.InfoDataList[0].n_Amount) <= 0) {

                            f_commonShowMsg("输入的数量不能小于等于0,请重新输入!");
                            $(".BinBarCode").focus().select();
                            return;
                        }

                        //检查当前分配记录中是否有存在未扫器具编码的记录，有则需要扫器具编码

                        if (vue.BinCode == "") {
                            f_commonShowMsg("当前有记录未扫对应的器具编码,请选中记录并补扫器具编码!");
                            $(".BinBarCode").focus().select();
                            return;
                        }


                        //获取批次
                        var Batch = vue.InfoDataList[0].s_Batch;
                        //储位分配方式
                        var s_Warehouse_StorageAllocationMethod = vue.InfoDataList[0].s_Warehouse_StorageAllocationMethod;

                        //数量
                        var n_Amount = vue.InfoDataList.length + ",";
                        //器具编码
                        var s_Bin_Code = vue.InfoDataList[0].s_BinBarCode + ",";

                        //设置浏览器缓存PackingPutOnOffSingle_Bin_GoodsBarCode存储该器具里的所有条码信息，然后在系统库位分配页中进行提取
                        //设置浏览器缓存PackingPutOnOffSingle_Bin_BillStockInOutId存储对应的工单记录的条码信息
                        //---------------------------------------------------------------------------
                        var goodsbarcode_str = "";
                        vue.InfoDataList.forEach(function (value, index) {
                            goodsbarcode_str += value.s_GoodsBarCode + ","
                        })

                        localStorage.setItem("PackingPutOnOffSingle_Bin_GoodsBarCode", goodsbarcode_str);
                        localStorage.setItem("PackingPutOnOffSingle_Bin_BillStockInOutId", "@(n_BillStockInOut_Id)");

                        //---------------------------------------------------------------------------

                        //储位分配方式【1 为系统分配，2 为手工指定】
                        if (s_Warehouse_StorageAllocationMethod == "1") {
                            //跳转至库位扫描界面
                            location.href = "LocationScanningUpSingle?ParentIds=" + "@ParentIds" + "&GoodsCode=" + vue.InfoDataList[0].s_CustomerCode + "&Batch=" + Batch + "&GoodsBarCode=" + vue.InfoDataList[0].s_GoodsBarCode
                        + "&GoodsWorkQuantity=" + n_Amount + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)"
                        + "&s_BinId=" + "" + "&s_Bin_Code=" + s_Bin_Code + "&s_Warehouse_ShelfForm=1";
                        } else if (s_Warehouse_StorageAllocationMethod == "2") {
                            //跳转至库位扫描界面
                            location.href = "LocationScanningManualUpSingle?ParentIds=" + "@ParentIds" + "&GoodsCode=" + vue.InfoDataList[0].s_CustomerCode + "&Batch=" + Batch + "&GoodsBarCode=" + vue.InfoDataList[0].s_GoodsBarCode
                        + "&GoodsWorkQuantity=" + n_Amount + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)"
                        + "&s_BinId=" + "" + "&s_Bin_Code=" + s_Bin_Code + "&s_Warehouse_ShelfForm=1";
                        }

                    },
                    //加载页面后执行
                    f_reloadPage: function () {

                        //给标题
                        window.parent.$(".top").find("label").text("条码扫描");
                        //阻止键盘弹出
                        f_preventKeyBoard();

                        //判定是否存在父窗口
                        if (window.top == window.self) {
                            //加载返回事件 
                            window.parent.f_loadEvent("../../../../PackingPutOnOffSingle/Index?ParentIds=" + "@ParentIds");
                        } else {

                            //返回
                            $("#btnBotton").click(function () {

                                location.href = "../../../../PackingPutOnOffSingle/Index?ParentIds=" + "@ParentIds";
                            })
                        }


                        //当浏览器缓存PackingPutOnOffSingle_Bin_GoodsBarCode存储该器具里的所有条码信息 不为空时,则进行默认查询
                        if (localStorage.getItem("PackingPutOnOffSingle_Bin_GoodsBarCode") != "") {
                            vue.f_SelPackingPutOnOffSingleGoodsReturnInfo_Single();
                        } else {
                            $(".GoodsBarCode").val("").focus();
                        }
                    },
                    //清空数据
                    f_emptyInfoTab: function () {
                        //清空
                        vue.InfoDataList = new Array();

                    },
                    //验证所填是否是数字,不是则清空
                    f_checkNum: function () {
                        //检查是否是非数字值
                        if (isNaN($(event.target).val())) {
                            $(event.target).val("");
                        }
                    },
                    //根据器具条码查询对应器具信息
                    f_selBinInfo: function () {
                        //获取器具条码
                        var BinBarCode = $(".BinBarCode").val();

                        //获取车型
                        var s_PartDescription_Model = vue.InfoDataList.filter(function (item) {
                            return item.n_isCheck == true
                        })[0]["s_PartDescription_Model"];

                        //对象名 根据器具条码查询对应的器具信息
                        var objectName = "SelBinInfoByBarCode_Single";
                        //传递参数
                        var param = { s_Bin_Code: BinBarCode, s_PartDescription_Model: s_PartDescription_Model };

                        ajaxhelper.ajax_Get(objectName, param, function (result) {

                            if (result.Data[1].length > 0) {
                                f_commonShowMsg("该器具条码已经被未提交的单据产品所占用,请重新输入!");
                                //重新焦点
                                $(".BinBarCode").val("").focus();
                                return;
                            }

                            if (result.Data[0].length > 0) {
                                //判定输入的条码数量不能超过已扫入器具码的器具容量
                                if (vue.InfoDataList.length > result.Data[0][0].f_Bin_ApplianceCapacity) {
                                    f_commonShowMsg("该器具条码的器具容量是" + result.Data[0][0].f_Bin_ApplianceCapacity + ",无法装载更多的货物,请重新确认!");
                                    //重新焦点
                                    $(".BinBarCode").val("").focus();
                                    return;
                                }
                            }

                            //                            if (result.Data[2].length == 0) {
                            //                                f_commonShowMsg("该器具条码不能用于装载该产品,请重新输入!");
                            //                                //重新焦点
                            //                                $(".BinBarCode").val("").focus();
                            //                                return;
                            //                            }

                            //获取下一个默认选中的行记录
                            var next_index = 0;

                            //如果有对应的器具信息，则抽取器具ID
                            if (result.Data[0].length > 0) {

                                //判定是否已经重复使用该器具去装载，是的话则不允许加入
                                var isExistsLen = vue.InfoDataList.filter(function (item) {
                                    return item.s_BinBarCode == result.Data[0][0].s_Bin_Code;
                                })

                                if (isExistsLen > 0) {

                                    f_commonShowMsg("该器具条码在该单据中已被使用过,请重新输入!");

                                } else {
                                    vue.InfoDataList.forEach(function (value, index) {
                                        value.s_BinId = result.Data[0][0].n_Bin_Id;
                                        value.s_BinBarCode = result.Data[0][0].s_Bin_Code;
                                        value.f_Bin_ApplianceCapacity = result.Data[0][0].f_Bin_ApplianceCapacity;
                                    })
                                }
                                //器具码赋值
                                vue.BinCode = result.Data[0][0].s_Bin_Code;


                            } else { //如果没有对应的器具信息，则给于系统无对应器具信息提示
                                f_commonShowMsg("该器具条码在系统中无对应信息,请先维护器具信息后再重新输入!");
                            }

                            //清空
                            $(".BinBarCode").val("").focus();

                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);
                            //清空
                            $(".BinBarCode").val("").focus();
                        })
                    },
                    //选择行记录
                    f_checkRecord: function () {
                        var trindex = -1;

                        if ($(event.target).parent().attr("index") == undefined) {
                            trindex = $(event.target).attr("index");
                        } else {
                            trindex = $(event.target).parent().attr("index");
                        }

                        vue.InfoDataList.forEach(function (value, index) {
                            value.n_isCheck = false;
                            if (index == trindex) {
                                value.n_isCheck = true;
                            }
                        })
                    },
                    //选中库位匹配方式
                    f_radio: function (event) {
                        if ($(event.target).attr("value") == "批量录入") {

                            //跳转至单件录入扫描界面 
                            location.href = "AddBillStockInOutDetail?ParentIds=" + "@(ParentIds)" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)";
                        }
                    },
                    //删除条码信息
                    f_DelBillStockInOutDetail: function (event) {
                        var arr = new Array();
                        vue.InfoDataList.forEach(function (item, index) {
                            if (!item.n_isCheck) {
                                arr.push(item);
                            }
                        })
                        vue.InfoDataList = new Array();
                        vue.InfoDataList = arr;

                    },
                    //从库位分配页返回时,判定浏览器缓存PackingPutOnOffSingle_Bin_BillStockInOutId是否与当前单据的ID相符，然后再根据浏览器缓存 PackingPutOnOffSingle_Bin_GoodsBarCode 自动填充到结果表格中
                    f_SelPackingPutOnOffSingleGoodsReturnInfo_Single: function () {
                        //获取到浏览器缓存中该器具对应的条码信息
                        var GoodsBarCode = localStorage.getItem("PackingPutOnOffSingle_Bin_GoodsBarCode");
                        var BillStockInOutId = localStorage.getItem("PackingPutOnOffSingle_Bin_BillStockInOutId");

                        //比较单据ID是否相同，如果不相同则不是对应最近录入的工单，则跳过该方法
                        if (BillStockInOutId != "@(n_BillStockInOut_Id)") {
                            return;
                        }

                        //显示遮罩层
                        vue.IsShadowShow = true;

                        //对象名 根据喷涂下线QA码查询到相应的货物信息
                        var objectName = "SelPackingPutOnOffSingleGoodsReturnInfo_Single";
                        //传递参数
                        var param = { GoodsBarCode: GoodsBarCode, n_Warehouse_Id: "@(n_Warehouse_Id)", s_Bin_Code: "@(s_BinBarCode)" };

                        ajaxobjSecond = ajaxhelper.ajax_Get(objectName, param, function (result) {

                            if (result.IsSuccess) {

                                var n_Bin_Id, s_Bin_Name, s_Bin_Code
                                //加载对应器具的信息
                                if (result.Data[2].length > 0) {
                                    n_Bin_Id = result.Data[2][0].n_Bin_Id;
                                    s_Bin_Name = result.Data[2][0].s_Bin_Name;
                                    s_Bin_Code = result.Data[2][0].s_Bin_Code;
                                    vue.BinCode = result.Data[2][0].s_Bin_Code;
                                }

                                if (result.Data[0].length > 0) {
                                    result.Data[0].forEach(function (value, index) {
                                        vue.InfoDataList.push({
                                            s_Mother_Desc: value.s_Mother_Desc,
                                            s_CustomerCode: value.s_CustomerCode,
                                            s_CarColor: value.s_CarColor,
                                            s_Batch: value.s_Batch,
                                            s_BinId: n_Bin_Id,
                                            s_LogCode: value.s_LogCode,
                                            s_BinBarCode: s_Bin_Code,
                                            s_GoodsBarCode: value.s_LogCode,
                                            s_MotherCode: value.s_MotherCode,
                                            n_Amount: 1,
                                            n_isCheck: false,
                                            s_PartDescription_Model: value.s_PartDescription_Model,
                                            s_Warehouse_StorageAllocationMethod: result.Data[1][0].s_Warehouse_StorageAllocationMethod,
                                            f_PartDescription_InventoryCapacity: value.s_PartDescription_PullInventory
                                        })
                                    })
                                }

                                //显示遮罩层
                                vue.IsShadowShow = false;
                            }

                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);

                            //显示遮罩层
                            vue.IsShadowShow = false;
                        })
                    }
                }
            })

            //加载页面后执行
            vue.f_reloadPage();
        })
    </script>
}
