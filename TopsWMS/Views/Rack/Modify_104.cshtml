@using Tops.FRM;
@{
    //版本：1.2
    ViewBag.Title = "仓库信息";
    ViewBag.ModuleName = "详细资料";
    Layout = "~/TopsLib/Views/Shared/_DataObject.cshtml";
    string QueryName = "SelRack";
    Tops.FRM.Biz biz = Tops.FRM.Biz.GetBiz(QueryName, Tops.FRM.BizType.Query);
    var metas = Tops.FRM.TopsMeta.LoadMetas(QueryName);
    string ctrl = Request.QueryString["ctrl"];
    string id = Request.QueryString["Sel_Id"];
    string Sel_Id = Request.QueryString["Sel_Id"];
    ctrl = string.IsNullOrEmpty(ctrl) ? "edit" : ctrl;
    //公开两台配置参数给分部视图
    ViewBag.Biz = biz;
    ViewBag.Metas = metas;
    var moduleConfig = ModuleConfig.GetModuleConfig(metas, biz.Lookups, biz, ctrl);

    //查询出厂房与车间的关系信息
    BizResult br = Tops.FRM.Biz.Execute("SelWarehouseNeedInfo", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@Sel_Id", Sel_Id) }, BizType.Query);
    List<System.Data.DataTable> list = br.Data as List<System.Data.DataTable>;

    Dictionary<string, string> dic = new Dictionary<string, string>();


    if (list[0].Rows.Count > 0)
    {
        for (int index = 0; index < list[0].Rows.Count; index++)
        {
            dic.Add(list[0].Rows[index]["n_Shopfloor_Id"].ToString(), list[0].Rows[index]["n_Block_Id"].ToString());
        }
    }

    //分隔符
    string SplitStr = list[1].Rows[0]["SplitStr"].ToString();

    //储位码条码
    string s_Space_BarCode = string.Empty;
    if (list[2].Rows.Count > 0)
    {
        s_Space_BarCode = list[2].Rows[0]["s_Space_BarCode"].ToString();
    }

    //重组显示字段配置
    foreach (string key in metas[0].Keys)
    {
        if (!metas[0][key].Hide)
        {
            //宽度大于300的string类型文本默认给文本域
            if (metas[0][key].Width >= 300)
            {
                metas[0][key].Type = "Textarea";
            }
        }
    }

}
@section Params{
    <form id="paramForm">
    <div class="item_title">
        详细资料：</div>
    <input type="hidden" name="Sel_Id" value="@(Sel_Id)" />
    <input type="hidden" name="SplitStr" value="@(SplitStr)" />
    <input type="hidden" name="s_Space_BarCode" value="@(s_Space_BarCode)" />
    <div class="toolbar_model">
        <label class="modeltext">
            模式:</label><select class="model" v-model="selected" v-on:change="f_changemodel" ref="model">
                <option v-for="option in options" v-bind:value="option.value">{{ option.text }}</option>
            </select>
    </div>
    <div id="PackCount" class="param_items">
        <span>{{ PackCountSpan }}</span><input type="text" name="PackCount" style="width: 100px;" />
    </div>
    <div id="paramlist" style="width: 1000px;">
        @foreach (string key in metas[0].Keys)
        {
            if (!metas[0][key].Hide)
            {
                if (metas[0][key].Type.Equals("String") || metas[0][key].Type.Equals("Int32") || metas[0][key].Type.Equals("Double"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="text" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("DateTime") || metas[0][key].Type.Equals("BeginDateTime") || metas[0][key].Type.Equals("EndDateTime"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="datetime" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("Textarea"))
                {
            <div class="param_items" style="width:@(metas[0][key].Width + 180)px;display:block;">
                <span>@(metas[0][key].Caption):</span><textarea rows="3" cols="3" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" ></textarea>
            </div>
                }
                else if (metas[0][key].Type.Equals("Int"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span>
                <select name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" >
                    @foreach (string dkey in metas[0][key].DataList.Keys)
                    { 
                        <option key="@(dkey)">@(metas[0][key].DataList[dkey])</option>
                    }
                </select>
            </div>
                }
            }
        }
    </div>
    <div id="paramlistMore" style="width: 1000px;">
        @foreach (string key in metas[0].Keys)
        {
            if (!metas[0][key].Hide)
            {
                if (metas[0][key].Type.Equals("String") || metas[0][key].Type.Equals("Int32") || metas[0][key].Type.Equals("Double"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="text" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("DateTime") || metas[0][key].Type.Equals("BeginDateTime") || metas[0][key].Type.Equals("EndDateTime"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span><input type="datetime" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" />
            </div>
                }
                else if (metas[0][key].Type.Equals("Textarea"))
                {
            <div class="param_items" style="width:@(metas[0][key].Width + 180)px;display:block;">
                <span>@(metas[0][key].Caption):</span><textarea rows="3" cols="3" name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" ></textarea>
            </div>
                }
                else if (metas[0][key].Type.Equals("Int"))
                {
            <div class="param_items">
                <span>@(metas[0][key].Caption):</span>
                <select name="@(metas[0][key].Field)" style="width:@(metas[0][key].Width)px;" >
                    @foreach (string dkey in metas[0][key].DataList.Keys)
                    {
                        if (metas[0][key].DataList.Keys.Contains(dkey))
                        {
                            <option key="@(dkey)">@(metas[0][key].DataList[dkey])</option>
                        }
                    }
                </select>
            </div>
                }
            }
        }
    </div>
    <div id="showPackArea">
        <div v-bind:class="radiocss">
            <span>{{ ShowPackAreaSpan }}</span>
            <input type="checkbox" id="BlockState" name="CodeState" value="BlockState" v-model="Picked" disabled="disabled" />
            <label for="BlockState">
                工厂编码</label>
            <input type="checkbox" id="ShopFloorState" name="CodeState" value="ShopFloorState" disabled="disabled"
                v-model="Picked" />
            <label for="ShopFloorState">
                厂房编码</label>
            <input type="checkbox" id="WarehouseState" name="CodeState" value="WarehouseState" disabled="disabled"
                v-model="Picked" />
            <label for="WarehouseState">
                仓库编码</label>
            <label>
                货架编码前缀</label>
            <input name="letter" type="text" v-bind:class="SerialNumber" />
            <input type="checkbox" id="RackState" name="CodeState" value="RackState" v-model="Picked"
                disabled="disabled" />
            <label for="RackState" >
                货架编码</label>
            @*|<label>
                流水号位数</label>
            <input type="text" name="SerialNumber" value="5" disabled="disabled" v-bind:class="SerialNumber" />*@
            |<label>
                分隔符</label>
            <input type="text" name="Separator" value="@(SplitStr)" disabled="disabled" v-bind:class="SerialNumber"  />
            <span v-bind:class="PickedCheckbox">{{ Picked }}</span>
            <input type="button" name="FormingNewRules" class="save_bt" value="刷新编码前缀" />
        </div>
        <div v-bind:class="ShowPackCodecss">
            <span>{{ PackCodeInfomation }}</span>
            <label>
            </label>
        </div>
        <div v-bind:class="ShowPackAreacss">
            <span>{{ PackAreaInfomation }}</span>
            <label>
            </label>
        </div>
    </div>
    </form>
}
@section Script{
    <script src="../../Content/vue.min.js" type="text/javascript"></script>
    <style type="text/css">
        .param_items
        {
            display: inline-block;
            width: 280px;
            line-height: 30px;
            text-align: right;
            margin: 2px;
        }
        
        .param_items input, .param_items textarea
        {
            border: 1px solid skyblue;
            margin-left: 5px;
        }
        
        /* 模式切换 */
        .toolbar_model
        {
            display: none;
        }
        
        .modeltext
        {
            margin-left: 35px;
        }
        .model
        {
            margin-left: 5px;
        }
        /* 模式切换 */
        
        /* 批量录入模式样式 */
        #paramlistMore
        {
            display: none;
        }
        #PackCount
        {
            display: none;
        }
        #showPackArea
        {
            background: skyblue;
            width: 1000px;
            height: 200px;
        }
        /* 批量录入模式样式 */
        
        /* 储位码编码区域 */
        .radioItem
        {
            padding: 10px 0px 0px 5px;
            width: 650px;
        }
        .SerialNumber
        {
            width: 20px;
        }
        .packareaItem
        {
            padding: 10px 0px 0px 5px;
            width: 1000px;
        }
        .packcodeItem
        {
            padding: 10px 0px 0px 5px;
            width: 1000px;
        }
        .PickedCheckbox
        {
            display: none;
        }
        /* 储位码编码区域 */
    </style>
    <script type="text/javascript">
    var moduleConfig=@Html.Raw(moduleConfig);
    var topsRender = null;
    var detailTab = null;

    //选择模式下拉框
    var model = null;

    //展示货架储位编码区域
    var showPackArea = null;

    //所有厂房，车间，仓库的编码信息
    var WarehousCodeData = null;

    //当前仓库的货架编码最大值
    var PackCodeData = null;

    $(function () {
        $(",#saveBt").show();
        //添加模式
        $("#module_toolbar").append($(".toolbar_model").children());  
        $("#paramlistMore").find(".param_items:eq(1)").hide(); 

        //查询所有厂房，车间，仓库的编码信息
        f_SelWarehouseCodeList(); 
        //绑定框架默认加载的文本框事件
        f_loadEvent();
         
        
        //选择模式下拉框
        model = new Vue({
            el:"#module_toolbar",
            data:{
               selected:"批量录入",
               options:[{"text":"逐个录入","value":"逐个录入"},{"text":"批量录入","value":"批量录入"}]
            },
            methods:{
                //选择模式
                f_changemodel:function(event){
             
                    if($(this.$refs.model).find("option:selected").text() == "逐个录入"){
                       $("#paramlistMore").hide();
                       $("#paramlist").show();
                       $("#paramlist").find("#PackCount").val("1");
                       
                       //$("[name=letter]").val($("[name=s_Rack_Code]").val());
                    }else{
                       $("#paramlistMore").show();
                       $("#paramlist").hide();
                       
                       //$("[name=letter]").val("");
                    }
    
                }
            } 
        }) 
        model.f_changemodel(); 
        
        //货架个数文本框
        new Vue({
            el:"#PackCount",
            data:{
                 PackCountSpan:"货架排数:"
            }
        })
        
        //展示货架储位编码区域
        showPackArea =  new Vue({
            el:"#showPackArea",
            data:{
               //Picked:["BlockState","ShopFloorState","WarehouseState","RackState"],
               Picked:["ShopFloorState","WarehouseState","RackState"],
               ShowPackAreaSpan:"储位码规则组成：",
               PackCodeInfomation:"货架编码前缀：",
               PackAreaInfomation:"储位码编码前缀：",  
               radiocss:{
                  radioItem: true
               },
               ShowPackCodecss:{
                  packcodeItem:true 
               },
               ShowPackAreacss:{
                  packareaItem:true
               },
               SerialNumber:{
                  SerialNumber:true
               },
               PickedCheckbox:{
                  PickedCheckbox:true
               }
            } 
        })

        var $PackCount = $("#PackCount").clone(true);
        //加入货架个数
        $($PackCount).removeAttr("Id");
        $($PackCount).insertAfter($("#paramlistMore").find(".param_items:eq(1)")); 
        
        var $PackCounts = $("#PackCount").clone(true);
        //加入货架个数
        $($PackCounts).removeAttr("Id"); 
        $($PackCounts).insertAfter($("#paramlist").find(".param_items:eq(1)"));
        $("#paramlist").find(".param_items:eq(2)").hide();
        $("#paramlist").find("[name=PackCount]").val("1");
    });

    
    //获取添加或修改所需要的数组
    function f_getData(){
        
        var $paramlist = $("#paramlistMore").css("display") == "none"?$("#paramlist"):$("#paramlistMore");

        var obj = new Object();  
        $paramlist.find(".param_items").each(function(index,value){
             if($(value).find("input").length > 0 ){
                obj[$(value).find("input").attr("name")] = $(value).find("input").val();
             }else if($(value).find("textarea").length > 0 ){
                obj[$(value).find("textarea").attr("name")] = $(value).find("textarea").val(); 
             }else if($(value).find("select").length > 0 ){
                obj[$(value).find("select").attr("name")] = $(value).find("option:selected").attr("key"); 
             }
        }) 
        obj.PackCodeRule = $("[class=PickedCheckbox]").text(); 
        obj.s_Rack_CodePrefix = $("[name=letter]").val();
        obj.Sel_Id = $("[name=Sel_Id]").val()
        return obj;
    }

    //加载数据
    function f_setData(data){
    
        var $paramlist = $("#paramlistMore").css("display") == "none"?$("#paramlist"):$("#paramlistMore");

        for(var d in data){
            if($paramlist.find("[name="+d+"]").attr("type") == "text" || $paramlist.find("[name="+d+"]").attr("type") == "datetime"  || $paramlist.find("[name="+d+"]").attr("type") == "textarea"){ 
               $paramlist.find("[name="+d+"]").val(data[d]);
            }else{   
               $paramlist.find("[name="+d+"]").find("option[key="+data[d]+"]").attr("selected","selected");  
            }
        }  

        $("[name=letter]").val(data["s_Rack_CodePrefix"]);

        if($("[name=Sel_Id]").val()!=""){
           f_setcheckboxPick($("[name=s_Space_BarCode]").val());
        }

        $paramlist.find("[name=s_Rack_Warehouse_Name]").change(); 

        //$("[name=letter]").val($("[name=s_Rack_Code]").val());
    }

 

    //查询所有厂房，车间，仓库的编码信息
    function f_SelWarehouseCodeList(){
        $.ajax({
            type:"GET",
            url:"/AjaxGet/SelWarehouseCodeList",
            success:function(result){
                result = JSON.parse(result);
                if(result.IsSuccess){
                   if(result.Data[0].length>0){
                      WarehousCodeData = result.Data[0];
                      PackCodeData = result.Data[1];
                   }
                }else{ 
                   alert(result.Msgs[0]);
                }
            }
        })
    }

    //绑定框架默认加载的文本框事件
    function f_loadEvent(){ 
        //仓库选择事件
        $("[name=s_Rack_Warehouse_Name]").change(function(){
            if($(this).find("option:selected").attr("key")!="-1"){
               var obj = this;
               //修改不经过此处理
               if("@(ctrl)" == "add"){
                  $.each(PackCodeData,function(index,value){ 
                      if($(obj).find("option:selected").attr("key") == value.n_Warehouse_Id){
                         $("[name=s_Rack_Code]").val(value.s_Rack_Code); 
                         return false;
                      } 
                  })
               }

               $.each(WarehousCodeData,function(index,value){ 
                  if($(obj).find("option:selected").attr("key") == value.n_Warehouse_Id){
                 
                      f_formationRackCode(value.s_Warehouse_Code,value.s_Shopfloor_Code,value.s_Block_Code);
                      return false;
                  } 
               }) 
            }
        }) 
        
        //货架编码改值事件
        $("[name=s_Rack_Code],[name=PackCount]").live("change",function(){
            var $paramlist = $("#paramlistMore").css("display") == "none"?$("#paramlist"):$("#paramlistMore");

            if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key")!="-1"){ 
               $.each(PackCodeData,function(index,value){ 
                  if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key") == value.n_Warehouse_Id){
                      $paramlist.find("[name=s_Rack_Warehouse_Name]").find("[name=s_Rack_Code]").val(value.s_Rack_Code);
                      return false;
                  } 
               })

               $.each(WarehousCodeData,function(index,value){ 
                  if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key") == value.n_Warehouse_Id){
                      f_formationRackCode(value.s_Warehouse_Code,value.s_Shopfloor_Code,value.s_Block_Code);
                      return false;
                  } 
               })
 
            }
            
            //$("[name=letter]").val($(this).val()); 
        })  
        
        //刷新编码前缀
        $("[name=FormingNewRules]").live("click",function(){
            var $paramlist = $("#paramlistMore").css("display") == "none"?$("#paramlist"):$("#paramlistMore");

            if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key")!="-1"){ 
               $.each(PackCodeData,function(index,value){ 
                  if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key") == value.n_Warehouse_Id){
                      $paramlist.find("[name=s_Rack_Warehouse_Name]").find("[name=s_Rack_Code]").val(value.s_Rack_Code);
                      return false;
                  } 
               })

               $.each(WarehousCodeData,function(index,value){ 
                  if($paramlist.find("[name=s_Rack_Warehouse_Name]").find("option:selected").attr("key") == value.n_Warehouse_Id){
                      f_formationRackCode(value.s_Warehouse_Code,value.s_Shopfloor_Code,value.s_Block_Code);
                      return false;
                  } 
               })
 
            }
        })

        //只能填写数字
        $("[name=s_Rack_Code]").live("keyup",function(){ 
            $(this).val($(this).val().replace(/[^\d]/g,''));
        });
    }

    //形成储位码编码前缀,货架编码前缀
    function f_formationRackCode(s_Warehouse_Code,s_Shopfloor_Code,s_Block_Code){

         var $paramlist = $("#paramlistMore").css("display") == "none"?$("#paramlist"):$("#paramlistMore");
         //分隔符
         var Separator = $("[name=SplitStr]").val();
         //货架编码
         var s_Rack_Code = parseInt($paramlist.find("[name=s_Rack_Code]").val().trim());
         //货架前缀
         var letter = $("[name=letter]").val();
         //货架个数
         var PackCount = $paramlist.find("[name=PackCount]").val();
         if(PackCount == "" || PackCount == "0"){
            return; 
         }

         //判定是否选中
         if($(".PickedCheckbox").text().indexOf("BlockState")!= -1){
            s_Block_Code = s_Block_Code.trim() + Separator;
         }else{
            s_Block_Code = "";
         }
         
         if($(".PickedCheckbox").text().indexOf("ShopFloorState")!= -1){
            s_Shopfloor_Code = s_Shopfloor_Code.trim() + Separator;
         }else{
            s_Shopfloor_Code = "";
         }
         
         if($(".PickedCheckbox").text().indexOf("WarehouseState")!= -1){
            s_Warehouse_Code = s_Warehouse_Code.trim() + Separator;
         }else{
            s_Warehouse_Code = "";
         }
         
         var codestr = "";
         var areastr = "";

         //货架编码前缀
         for(var i = 0;i < parseInt(PackCount);i++){
             codestr += ((s_Rack_Code + i < 10 ? "0"+ (s_Rack_Code + i) :s_Rack_Code + i))+","
             areastr += s_Block_Code  + s_Shopfloor_Code  + s_Warehouse_Code  + letter + ((s_Rack_Code + i < 10 ? "0"+ (s_Rack_Code + i) :s_Rack_Code + i))+","
         }
         
         $(".packcodeItem").find("label").text(codestr);
         $(".packareaItem").find("label").text(areastr);
    }

    //设置选中的文本框
    function f_setcheckboxPick(s_Space_BarCode){ 
        
       if(s_Space_BarCode != $(".packareaItem").val()){ 
          showPackArea._data.Picked = ["ShopFloorState","WarehouseState","RackState"];
          $(".PickedCheckbox").text('["ShopFloorState","WarehouseState","RackState"]');
//          if(s_Space_BarCode != $(".packareaItem").val()){
//             showPackArea._data.Picked = ["WarehouseState","RackState"];
//             $(".PickedCheckbox").text('["WarehouseState","RackState"]');
//             if(s_Space_BarCode != $(".packareaItem").val()){ 
//                showPackArea._data.Picked = ["RackState"]; 
//                $(".PickedCheckbox").text('["RackState"]');
//             }
//          }
       }
    }

    
    //是否是小数
    function checkSmallNum() {
        //检查是否是非数字值
        if (isNaN(this.value)) {
            this.value = "";
        }
        if (this != null) {
            //检查小数点后是否对于两位
            if (this.value.toString().split(".").length > 1 && this.value.toString().split(".")[1].length > 2) {
                alert("所填的结果小数点后最多只能两位，请重新输入！");
                this.value = "";
            }
        }
    }
    
    //是否是数字
    function checkNum() {
        //检查是否是非数字值
        if (isNaN(this.value)) {
            this.value = "";
        } 
    }

    </script>
    @if (ctrl == "add")
    {
        <script type="text/javascript">

            $(function () {
                $("#saveBt").show();
                //渲染插件
                topsRender = $("#paramForm *[fieldType]").pluginRender({ moduleConfig: moduleConfig });

                //数字验证
                $("[name=PackCount],input[name=n_Rack_LayerCapacity],input[name=n_Rack_SpaceCapacity],input[name=n_Rack_MaximumStorageCapacity]").keyup(checkNum);
                //小数验证
                $("[name=f_Rack_Width],input[name=f_Rack_Height],input[name=n_Rack_SpaceCapacity],input[name=f_Rack_Length]").keyup(checkSmallNum);

                //添加保存
                $("#saveBt").click(function () {
                    $("#module_toolbar input").attr("disabled", "disabled");
                    $("#loading_img").show();
                    //var data = topsRender.serializeData(); 
                    var data = f_getData();

                    $.topsAjax({
                        type: "POST",
                        url: "/AjaxPost/AddPack",
                        data: data,
                        dealError: false,
                        success: function (data) {
                            if (data.IsSuccess) {
                                alert("保存成功！");
                                //添加成功后刷新列表并关闭标签
                                location.reload();
                                window.parent.f_closeTab("Add");
                            } else {
                                if (data.Other1 != null)
                                    topsRender.setError(data.Other1);
                                alert("保存失败：" + data.Msgs[0]);
                            }
                            $("#module_toolbar input").removeAttr("disabled");
                            $("#loading_img").hide();
                        }
                    });
                });
            });
        </script>
    }
    else if (ctrl == "edit")
    {
        <script type="text/javascript">
            //var idData =@Html.Raw(Server.UrlDecode(id))
            $(function () {
                $("#saveBt").show();

                //默认选中逐个录入
                $("#paramlist").show();
                $(".modeltext,.model,#paramlistMore").hide();
                $("[name=s_Rack_Code],[name=letter]").attr("disabled", "disabled");
                $("[name=CodeState]").attr("disabled", "disabled");

                //加载数据
                $.topsAjax({
                    type: "GET",
                    url: "/AjaxGet/SelRack",
                    data: { n_Rack_Id: $("[name=Sel_Id]").val() },
                    dealError: false,
                    success: function (data) {
                        if (data.IsSuccess) {
                            //渲染插件
                            //topsRender = $("#paramForm *[fieldType]").pluginRender({ data: data.Data,moduleConfig: moduleConfig });

                            if (data.Data[0].length > 0) {
                                 
                                f_setData(data.Data[0][0]);
                            }
                            //数字验证
                            $("[name=PackCount],input[name=n_Rack_LayerCapacity],input[name=n_Rack_SpaceCapacity],input[name=n_Rack_MaximumStorageCapacity]").keyup(checkNum);
                            //小数验证
                            $("[name=f_Rack_Width],input[name=f_Rack_Height],input[name=n_Rack_SpaceCapacity],input[name=f_Rack_Length]").keyup(checkSmallNum);

                        } else {
                            alert("获取数据失败：" + data.Msgs[0]);
                        }
                    }
                });

                //保存修改
                $("#saveBt").click(function () {
                    $("#module_toolbar input").attr("disabled", "disabled");
                    $("#loading_img").show();
                    //var data = topsRender.serializeData();
                    var data = f_getData();

                    $.topsAjax({
                        type: "POST",
                        url: "/AjaxPost/UpdateRack",
                        data: data,
                        dealError: false,
                        success: function (data) {
                            if (data.IsSuccess) {
                                alert("保存修改成功！");
                                //刷新列表
                                window.parent.f_flushGrid();
                                window.parent.f_closeTab("Modify");
                                location.reload();
                            } else {
                                if (data.Other1 != null)
                                    topsRender.setError(data.Other1);
                                alert("保存修改失败：" + data.Msgs[0]);
                            }
                            $("#module_toolbar input").removeAttr("disabled");
                            $("#loading_img").hide();
                        }
                    });
                });

            });
     
        </script>   
    }
    <script type="text/javascript">
        $(function () {
            detailTab = $("#detaillist").ligerTab({
                onAfterSelectTabItem: function (tabID) {
                    var $g = $("div[tabid=" + tabID + "] div[fieldtype=grid]", $(this.element));
                    if ($g.length == 0) return;
                    var gIndex = $g.attr("objindex");
                    topsRender.find("grid" + gIndex).obj.grid.setWidth();
                }
            });
        });
    </script>
}
