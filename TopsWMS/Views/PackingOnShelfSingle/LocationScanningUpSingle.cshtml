@{
    Layout = "~/TopsLib/Views/Shared/_MobileTemplate.cshtml";

    string ParentIds = string.Empty;
    if (Request.QueryString.AllKeys.Contains("ParentIds"))
    {
        ParentIds = Request.QueryString["ParentIds"];
    }
    //货物编码
    string GoodsCode = Request.QueryString["GoodsCode"];
    if (Request.QueryString.AllKeys.Contains("GoodsCode"))
    {
        GoodsCode = Request.QueryString["GoodsCode"];
    }
    
    //货物标识编码
    string GoodsBarCode = Request.QueryString["GoodsBarCode"];
    if (Request.QueryString.AllKeys.Contains("GoodsBarCode"))
    {
        GoodsBarCode = Request.QueryString["GoodsBarCode"];
    }
    
    //数量
    string GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    if (Request.QueryString.AllKeys.Contains("GoodsWorkQuantity"))
    {
        GoodsWorkQuantity = Request.QueryString["GoodsWorkQuantity"];
    }
    
    //仓库外键ID
    string n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    if (Request.QueryString.AllKeys.Contains("n_Warehouse_Id"))
    {
        n_Warehouse_Id = Request.QueryString["n_Warehouse_Id"];
    } 

    //下架单据外键ID
    string n_BillStockInOut_Id = string.Empty;
    if (Request.QueryString.AllKeys.Contains("n_BillStockInOut_Id"))
    {
        n_BillStockInOut_Id = Request.QueryString["n_BillStockInOut_Id"];
    }


    //单据的录入方式 批量录入[2]，单个录入[1];
    string s_Warehouse_ShelfForm = "2";
    if (Request.QueryString.AllKeys.Contains("s_Warehouse_ShelfForm"))
    {
        s_Warehouse_ShelfForm = Request.QueryString["s_Warehouse_ShelfForm"];
    }
}
@section Body{
    <input type="hidden" name="GoodsCode" value="@(GoodsCode)" />
    <div class="body">
        <div v-bind:class="TitleTab_Showed">
            <table cellspacing="0">
                <tr>
                    <th>
                        库位
                    </th>
                    <th>
                        器具码
                    </th>
                    <th>
                        批次
                    </th>
                    <th>
                        下架数/<br />
                        库存数
                    </th>
                </tr>
            </table>
        </div>
        <div v-bind:class="InfoTab_Showed">
            <table cellspacing="0">
                <tr v-for="(item,i) in DataList" :n_Bin_Id="item.n_Bin_Id" :n_ListPutOnOff_Id="item.n_ListPutOnOff_Id" :s_ReportInventoryCurrent_Code="item.s_ReportInventoryCurrent_Code" 
                :s_ReportInventoryCurrent_SurplusNumber="item.s_ReportInventoryCurrent_SurplusNumber" :class="{ 'morechecked':item.s_ReportInventoryCurrent_isCheckSpace && item.s_ReportInventoryCurrent_isCheckBin }">
                   <td>{{ item.s_ReportInventoryCurrent_Code }}</td>
                   <td>{{ item.s_Bin_Code }}</td>
                   <td>{{ item.s_ReportInventoryCurrent_Batch }}</td>
                   <td>{{ item.s_ReportInventoryCurrent_DownNumber }}/{{ item.s_ReportInventoryCurrent_SurplusNumbers }}</td>
                </tr>
            </table>
        </div>
        <div>
            <input type="text" v-bind:class="GoodsWorkQuantity_Showed" name="GoodsWorkQuantity"
                value="@(GoodsWorkQuantity)" placeholder="下架总数" disabled="disabled" readonly="true" />
        </div>
        <div>
            <input type="text" v-bind:class="SpaceBarCode_Showed" name="SpaceBarCode" placeholder="请输入库位码" v-on:keyup.enter="f_reSureSpaceCode" />
        </div>
        
        <div>
            <input type="text" v-bind:class="BinBarCode_Showed" placeholder="请输入器具条码" v-on:keyup.enter="f_reSureBinCode" />
        </div>
        <div v-bind:class="button_Div_Showed">
            <div v-on:click="f_SaveBillStockInOut">
                确认下架</div>
        </div>
    </div>
}
@section Script{
    <style type="text/css">
        .TitleTab
        {
            width: calc(90%);
            margin: calc(2%) calc(5%) calc(0%) calc(5%);
            text-align: center;
            line-height: 44px;
        }
        .TitleTab table
        {
            width: 100%;
            height: 100%;
        }
        .TitleTab th
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            line-height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
            background: rgb(200 220 232);
        }
        
        .InfoTab
        {
            width: calc(90%);
            max-height: 132px;
            min-height: 132px;
            margin: calc(0%) calc(5%);
            text-align: center;
            line-height: 22px;
            overflow-y: scroll;
        }
        .InfoTab table
        {
            width: 100%;
            height: 100%;
        }
        .InfoTab td
        {
            width: 25%;
            border: 1px solid #a5e0a5;
            height: 22px;
            font-family: 微软雅黑;
            font-weight: normal;
            font-size: 12px;
        }
        
        .GoodsWorkQuantity
        {
            width: calc(90%);
            margin: calc(2.5%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        .SpaceBarCode
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        .BinBarCode 
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2.5%) calc(5%);
            height: 26px;
            border: 1px solid lightblue;
            text-align: center;
        }
        
        
        .button_Div div
        {
            width: calc(90%);
            margin: calc(0%) calc(5%) calc(2%) calc(5%);
            background: rgb(80, 182, 248);
            color: white;
            font-family: 微软雅黑;
            font-size: 12px;
            line-height: 45px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            display: inline-block;
            letter-spacing: 2px;
        }
        
        .morechecked
        {
            background:#a5e0a5;
        }
    </style>
    <script type="text/javascript">
        var ajaxhelper = new ajaxHelper();

        //ajax Post请求
        var ajaxFirst = null;

        $(function () {
            var vue = new Vue({
                el: ".body",
                data: {
                    TitleTab_Showed: "TitleTab", //结果标题表格样式
                    InfoTab_Showed: "InfoTab",   //结果表格样式
                    GoodsWorkQuantity_Showed: "GoodsWorkQuantity",   //数量样式
                    SpaceBarCode_Showed: "SpaceBarCode",   //库位码样式
                    button_Div_Showed: "button_Div", //按钮样式
                    BinBarCode_Showed: "BinBarCode", //器具条码
                    DataList: new Array(), //结果表格数据
                    Save_DataList: new Array(), //需要保存的数据
                    Bin_GoodsBarCodeList: new Array(), //该器具所承载的条码信息
                    Bin_BarCode: "" //器具码信息
                },
                methods: {
                    //加载页面后执行
                    f_reloadPage: function () {

                        //给标题
                        window.parent.$(".top").find("label").text("条码扫描");
                        //阻止键盘弹出
                        f_preventKeyBoard();

                        //判定是否存在父窗口
                        if (window.top == window.self) {
                            //加载返回事件 
                            window.parent.f_loadEvent("../../../../PackingOnShelfSingle/AddBillStockInOutDetailSingle?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                            + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&GoodsBarCode=" + "@(GoodsBarCode)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&s_Warehouse_ShelfForm=1");
                        } else {

                            //返回
                            $("#btnBotton").click(function () {

                                location.href = "../../../../PackingOnShelfSingle/AddBillStockInOutDetailSingle?ParentIds=" + "@ParentIds" + "&GoodsCode=" + $("[name=GoodsCode]").val()
                            + "&GoodsWorkQuantity=" + "@GoodsWorkQuantity" + "&n_Warehouse_Id=" + "@(n_Warehouse_Id)" + "&GoodsBarCode=" + "@(GoodsBarCode)" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)" + "&s_Warehouse_ShelfForm=1";
                            })
                        }

                        //库位码焦点
                        $(".SpaceBarCode").focus().select();

                        //初始化该货物的库位分配信息
                        vue.f_SelPutOnOffSingleReportInventoryCurrent();

                        //获取浏览器缓存PackingOnShelfSingle_Bin_BarCode的信息，获取到该器具信息
                        //获取浏览器缓存PackingOnShelfSingle_Bin_GoodsBarCode的信息，获取到该器具所装载的所有条码信息
                        //进行条码信息的分解,分解成一个个条码信息方便保存
                        var PackingOnShelfSingle_Bin_BarCode = localStorage.getItem("PackingOnShelfSingle_Bin_BarCode") == undefined ? "" : localStorage.getItem("PackingOnShelfSingle_Bin_BarCode");
                        vue.Bin_BarCode = PackingOnShelfSingle_Bin_BarCode;
                        var PackingOnShelfSingle_Bin_GoodsBarCode = localStorage.getItem("PackingOnShelfSingle_Bin_GoodsBarCode") == undefined ? "" : localStorage.getItem("PackingOnShelfSingle_Bin_GoodsBarCode");
                        if (PackingOnShelfSingle_Bin_GoodsBarCode != "") {
                            var arr = PackingOnShelfSingle_Bin_GoodsBarCode.substring(0, PackingOnShelfSingle_Bin_GoodsBarCode.length - 1).split(",");
                            vue.Bin_GoodsBarCodeList = arr;
                        }

                    },
                    //初始化该货物的库位分配信息
                    f_SelPutOnOffSingleReportInventoryCurrent: function () {
                        var PackingOnShelfSingle_Bin_BarCode = "";
                        //判定浏览器缓存是否有缓存器具信息
                        if (localStorage.getItem("PackingOnShelfSingle_Bin_BarCode") != undefined) {
                            PackingOnShelfSingle_Bin_BarCode = localStorage.getItem("PackingOnShelfSingle_Bin_BarCode");
                        }

                        //对象名 根据货物编码匹配出对应的库存信息
                        var objectName = "SelPackingOnShelfSingleInventoryCurrent_Single";
                        //传递参数
                        var param = { s_ReportInventoryCurrent_GoodsProductCode: $("[name=GoodsCode]").val()
                        , n_Warehouse_Id: "@(n_Warehouse_Id)", s_ReportInventoryCurrent_QualityStatus: 1,
                            n_BillStockInOut_Id: "@(n_BillStockInOut_Id)",
                            s_Bin_Code: PackingOnShelfSingle_Bin_BarCode
                        };

                        ajaxhelper.ajax_Get(objectName, param, function (result) {
                            if (result.IsSuccess) {
                                if (result.Data.length > 0 && result.Data[0].length > 0) {
                                    //获取提交的数量信息 
                                    var GoodsWorkQuantity = "@(GoodsWorkQuantity)";
                                    //获取显示行的集合
                                    var arr = new Array();
                                    //清空
                                    vue.DataList = [];

                                    $.each(result.Data[0], function (index, value) {

                                        if (value.s_ReportInventoryCurrent_SurplusNumber == "---") {
                                            arr.push({
                                                s_ReportInventoryCurrent_Code: value.s_ReportInventoryCurrent_Code,
                                                s_ReportInventoryCurrent_DownNumber: GoodsWorkQuantity,
                                                //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                s_ReportInventoryCurrent_SurplusNumber: "---",
                                                s_ReportInventoryCurrent_SurplusNumbers: "---",
                                                s_ReportInventoryCurrent_isCheckSpace: false,
                                                s_ReportInventoryCurrent_isCheckBin: false,
                                                s_ReportInventoryCurrent_GoodsProductCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                s_ListStockInOut_QualityStatus: 1,
                                                s_ReportInventoryCurrent_Batch: value.s_ReportInventoryCurrent_Batch,
                                                s_ReportInventoryCurrent_GoodsBarCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                n_BillStockInOut_Id: "@(n_BillStockInOut_Id)",
                                                s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                n_Bin_Id: value.n_Bin_Id,
                                                s_Bin_Code: value.s_Bin_Code,
                                                n_ReportInventoryCurrent_Id: value.n_ReportInventoryCurrent_Id

                                            })
                                            return false;
                                        } else if (value.s_ReportInventoryCurrent_SurplusNumber != "---" && value.s_ReportInventoryCurrent_SurplusNumber != 0) {
                                            //如果当前库位剩余数无法满足当前下架数量，则继续遍历下一个库位进行分配
                                            if (parseInt(GoodsWorkQuantity) > parseInt(value.s_ReportInventoryCurrent_SurplusNumber)) {
                                                arr.push({
                                                    s_ReportInventoryCurrent_Code: value.s_ReportInventoryCurrent_Code,
                                                    s_ReportInventoryCurrent_DownNumber: value.s_ReportInventoryCurrent_SurplusNumber,
                                                    //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                    s_ReportInventoryCurrent_SurplusNumber: 0,
                                                    s_ReportInventoryCurrent_SurplusNumbers: value.s_ReportInventoryCurrent_SurplusNumber,
                                                    s_ReportInventoryCurrent_isCheckSpace: false,
                                                    s_ReportInventoryCurrent_isCheckBin: false,
                                                    s_ReportInventoryCurrent_GoodsProductCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                    s_ListStockInOut_QualityStatus: 1,
                                                    s_ReportInventoryCurrent_Batch: value.s_ReportInventoryCurrent_Batch,
                                                    s_ReportInventoryCurrent_GoodsBarCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                    n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                    n_BillStockInOut_Id: "@(n_BillStockInOut_Id)",
                                                    s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                    n_Bin_Id: value.n_Bin_Id,
                                                    s_Bin_Code: value.s_Bin_Code,
                                                    n_ReportInventoryCurrent_Id: value.n_ReportInventoryCurrent_Id
                                                })
                                                GoodsWorkQuantity = parseInt(GoodsWorkQuantity) - parseInt(value.s_ReportInventoryCurrent_SurplusNumber);

                                            } else {
                                                arr.push({
                                                    s_ReportInventoryCurrent_Code: value.s_ReportInventoryCurrent_Code,
                                                    s_ReportInventoryCurrent_DownNumber: GoodsWorkQuantity,
                                                    //用于判定业务对象的逻辑处理 区分完整下架还是部分下架
                                                    s_ReportInventoryCurrent_SurplusNumber: value.s_ReportInventoryCurrent_SurplusNumber - GoodsWorkQuantity,
                                                    s_ReportInventoryCurrent_SurplusNumbers: value.s_ReportInventoryCurrent_SurplusNumber,
                                                    s_ReportInventoryCurrent_isCheckSpace: false,
                                                    s_ReportInventoryCurrent_isCheckBin: false,
                                                    s_ReportInventoryCurrent_GoodsProductCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                    s_ListStockInOut_QualityStatus: 1,
                                                    s_ReportInventoryCurrent_Batch: value.s_ReportInventoryCurrent_Batch,
                                                    s_ReportInventoryCurrent_GoodsBarCode: value.s_ReportInventoryCurrent_GoodsProductCode,
                                                    n_ListPutOnOff_Id: value.n_ListPutOnOff_Id,
                                                    n_BillStockInOut_Id: "@(n_BillStockInOut_Id)",
                                                    s_Warehouse_ShelfForm: "@(s_Warehouse_ShelfForm)",
                                                    n_Bin_Id: value.n_Bin_Id,
                                                    s_Bin_Code: value.s_Bin_Code,
                                                    n_ReportInventoryCurrent_Id: value.n_ReportInventoryCurrent_Id
                                                })
                                                return false;
                                            }
                                        }
                                    })

                                    vue.DataList = arr;
                                }
                            }
                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);
                        })
                    },
                    //进行下架确认
                    f_SaveBillStockInOut: function () {

                        var obj = event.target;
                        if ($(obj).is("[disabled]")) {
                            return;
                        }

                        //重复请求处理
                        if (ajaxFirst != null) {
                            ajaxFirst.abort();
                            ajaxFirst = null;
                            return;
                        }

                        $(obj).attr("disabled", "disabled");

                        //自动触发确认库位文本框的回车事件
                        vue.f_reSureSpaceCode();

                        //获取未进行确认库位的记录，并判定是否全部已经确认库位
                        var arr = vue.DataList.filter(function (result) {
                            return result.s_ReportInventoryCurrent_isCheckSpace == false
                            || result.s_ReportInventoryCurrent_isCheckBin == false;
                        });


                        if (arr.length > 0) {
                            f_commonShowMsg("当前还有未进行库位确认的记录，请全部库位确认完毕再点击下架!");
                            //重新焦点
                            $(".SpaceBarCode").val("").focus();

                            $(obj).removeAttr("disabled");
                            return;
                        }

                        //重组用于保存所用的数组
                        vue.Save_DataList = new Array();

                        vue.Bin_GoodsBarCodeList.forEach(function (value, index) {

                            var obj = new Object();
                            obj = jQuery.extend(true, {}, vue.DataList[0]);
                            obj.s_ReportInventoryCurrent_GoodsBarCode = value;
                            obj.s_ReportInventoryCurrent_GoodsProductCode = value.substring(0, value.length - 10);
                            obj.s_ReportInventoryCurrent_DownNumber = 1;
                            vue.Save_DataList.push(obj);
                        })
                         

                        //对象名 新增货物出库记录以及下架记录
                        var objectName = "InsertPackingOnShelfSingleListStockInOut_Single";

                        var param = { Dictionary: vue.Save_DataList };

                        ajaxFirst = ajaxhelper.ajax_Post(objectName, param, function (result) {

                            f_commonShowMsg("下架成功!");

                            //清除该器具对应的条码信息,器具码 的 浏览器缓存
                            localStorage.setItem("PackingOnShelfSingle_Bin_GoodsBarCode", "");
                            localStorage.setItem("PackingOnShelfSingle_Bin_BarCode", "");
                            localStorage.setItem("PackingOnShelfSingle_Bin_BillStockInOutId", "");

                            //跳转到条码扫描界面
                            setTimeout('location.href = "/PackingOnShelfSingle/AddBillStockInOutDetailSingle?ParentIds=" + "@ParentIds" + "&GoodsCode=" + "&GoodsWorkQuantity="+"&n_Warehouse_Id="+"@(n_Warehouse_Id)"+"&GoodsBarCode=" + "&n_BillStockInOut_Id=" + "@(n_BillStockInOut_Id)"', 2000);

                            ajaxFirst = null;
                        }, function (result) {

                            f_commonShowMsg(result.Msgs[0]);
                            ajaxFirst = null;

                            $(obj).removeAttr("disabled");
                        })
                    },
                    //确认库位
                    f_reSureSpaceCode: function () {
                        //获取库位编码
                        var SpaceBarCode = $("[name=SpaceBarCode]").val();

                        $.each(vue.DataList, function (index, value) {
                            if (value.s_ReportInventoryCurrent_Code == SpaceBarCode) {
                                value.s_ReportInventoryCurrent_isCheckSpace = true;
                            }
                        })

                        //清空
                        //$("[name=SpaceBarCode]").val("");
                        //重新聚焦
                        $(".BinBarCode").focus();
                    },
                    //确认器具
                    f_reSureBinCode: function () {
                        //获取库位编码
                        var BinBarCode = $(".BinBarCode").val();
                        //获取库位编码
                        var SpaceBarCode = $("[name=SpaceBarCode]").val();

                        $.each(vue.DataList, function (index, value) {

                            if (value.s_ReportInventoryCurrent_Code == SpaceBarCode && value.s_Bin_Code == BinBarCode) {
                                value.s_ReportInventoryCurrent_isCheckBin = true;
                            }
                        })

                        //清空
                        $(".BinBarCode").val("")
                        //重新聚焦
                        $("[name=SpaceBarCode]").val("").focus();
                    },
                    //验证所填是否是数字,不是则清空
                    checkNum: function () {
                        //检查是否是非数字值
                        if (isNaN($(event.target).val())) {
                            $(event.target).val("");
                        }
                    }
                }
            })

            //加载页面后执行
            vue.f_reloadPage();
        })
    </script>
}
